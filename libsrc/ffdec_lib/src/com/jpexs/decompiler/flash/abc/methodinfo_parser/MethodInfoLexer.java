/*
 *  Copyright (C) 2010-2021 JPEXS, All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. */
package com.jpexs.decompiler.flash.abc.methodinfo_parser;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0 from the specification file
 * <tt>C:/FFDec/jpexs-decompiler/libsrc/ffdec_lib/lexers/actionscript3_methodinfo.flex</tt>
 */
public final class MethodInfoLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    public static final int STRING = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\5\1\3\1\2\1\57\1\60\1\1\16\5\4\0\1\3\1\0"
            + "\1\42\1\0\1\4\2\0\1\56\2\0\1\45\1\37\1\44\1\7"
            + "\1\35\1\0\1\6\11\10\1\43\2\0\1\46\3\0\4\40\1\36"
            + "\1\40\5\4\1\31\1\4\1\25\1\4\1\17\12\4\1\12\1\41"
            + "\1\13\1\0\1\4\1\0\1\32\1\27\1\50\1\51\1\24\1\55"
            + "\1\53\1\4\1\21\1\4\1\52\1\33\1\11\1\14\1\20\1\47"
            + "\1\4\1\30\1\15\1\22\1\26\1\23\1\4\1\54\2\4\1\16"
            + "\1\0\1\34\1\0\6\5\1\61\32\5\2\0\4\4\4\0\1\4"
            + "\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4"
            + "\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4"
            + "\21\0\160\5\5\4\1\0\2\4\2\0\4\4\10\0\1\4\1\0"
            + "\3\4\1\0\1\4\1\0\24\4\1\0\123\4\1\0\213\4\1\0"
            + "\5\5\2\0\236\4\11\0\46\4\2\0\1\4\7\0\47\4\7\0"
            + "\1\4\1\0\55\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"
            + "\1\5\10\0\33\4\5\0\3\4\15\0\5\5\6\0\1\4\4\0"
            + "\13\5\5\0\53\4\37\5\4\0\2\4\1\5\143\4\1\0\1\4"
            + "\10\5\1\0\6\5\2\4\2\5\1\0\4\5\2\4\12\5\3\4"
            + "\2\0\1\4\17\0\1\5\1\4\1\5\36\4\33\5\2\0\131\4"
            + "\13\5\1\4\16\0\12\5\41\4\11\5\2\4\4\0\1\4\5\0"
            + "\26\4\4\5\1\4\11\5\1\4\3\5\1\4\5\5\22\0\31\4"
            + "\3\5\104\0\1\4\1\0\13\4\67\0\33\5\1\0\4\5\66\4"
            + "\3\5\1\4\22\5\1\4\7\5\12\4\2\5\2\0\12\5\1\0"
            + "\7\4\1\0\7\4\1\0\3\5\1\0\10\4\2\0\2\4\2\0"
            + "\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0\1\5\1\4"
            + "\7\5\2\0\2\5\2\0\3\5\1\4\10\0\1\5\4\0\2\4"
            + "\1\0\3\4\2\5\2\0\12\5\4\4\7\0\1\4\5\0\3\5"
            + "\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"
            + "\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5\4\0\2\5"
            + "\2\0\3\5\3\0\1\5\7\0\4\4\1\0\1\4\7\0\14\5"
            + "\3\4\1\5\13\0\3\5\1\0\11\4\1\0\3\4\1\0\26\4"
            + "\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\10\5"
            + "\1\0\3\5\1\0\3\5\2\0\1\4\17\0\2\4\2\5\2\0"
            + "\12\5\1\0\1\4\17\0\3\5\1\0\10\4\2\0\2\4\2\0"
            + "\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4"
            + "\7\5\2\0\2\5\2\0\3\5\10\0\2\5\4\0\2\4\1\0"
            + "\3\4\2\5\2\0\12\5\1\0\1\4\20\0\1\5\1\4\1\0"
            + "\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0"
            + "\2\4\3\0\2\4\3\0\3\4\3\0\14\4\4\0\5\5\3\0"
            + "\3\5\1\0\4\5\2\0\1\4\6\0\1\5\16\0\12\5\11\0"
            + "\1\4\7\0\3\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0"
            + "\12\4\1\0\5\4\3\0\1\4\7\5\1\0\3\5\1\0\4\5"
            + "\7\0\2\5\1\0\2\4\6\0\2\4\2\5\2\0\12\5\22\0"
            + "\2\5\1\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"
            + "\5\4\2\0\1\5\1\4\7\5\1\0\3\5\1\0\4\5\7\0"
            + "\2\5\7\0\1\4\1\0\2\4\2\5\2\0\12\5\1\0\2\4"
            + "\17\0\2\5\1\0\10\4\1\0\3\4\1\0\51\4\2\0\1\4"
            + "\7\5\1\0\3\5\1\0\4\5\1\4\10\0\1\5\10\0\2\4"
            + "\2\5\2\0\12\5\12\0\6\4\2\0\2\5\1\0\22\4\3\0"
            + "\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\5\4\0"
            + "\6\5\1\0\1\5\1\0\10\5\22\0\2\5\15\0\60\4\1\5"
            + "\2\4\7\5\4\0\10\4\10\5\1\0\12\5\47\0\2\4\1\0"
            + "\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0"
            + "\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0"
            + "\4\4\1\5\2\4\6\5\1\0\2\5\1\4\2\0\5\4\1\0"
            + "\1\4\1\0\6\5\2\0\12\5\2\0\4\4\40\0\1\4\27\0"
            + "\2\5\6\0\12\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0"
            + "\2\5\10\4\1\0\44\4\4\0\24\5\1\0\2\5\5\4\13\5"
            + "\1\0\44\5\11\0\1\5\71\0\53\4\24\5\1\4\12\5\6\0"
            + "\6\4\4\5\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5"
            + "\15\4\14\5\1\4\17\5\2\0\46\4\1\0\1\4\5\0\1\4"
            + "\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4"
            + "\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4"
            + "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4"
            + "\1\0\4\4\2\0\103\4\2\0\3\5\40\0\20\4\20\0\125\4"
            + "\14\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4\3\0\3\4"
            + "\17\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5\13\0\22\4"
            + "\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0\64\4\40\5"
            + "\3\0\1\4\3\0\2\4\1\5\2\0\12\5\41\0\3\5\2\0"
            + "\12\5\6\0\130\4\10\0\51\4\1\5\1\4\5\0\106\4\12\0"
            + "\35\4\3\0\14\5\4\0\14\5\12\0\12\5\36\4\2\0\5\4"
            + "\13\0\54\4\4\0\21\5\7\4\2\5\6\0\12\5\46\0\27\4"
            + "\5\5\4\0\65\4\12\5\1\0\35\5\2\0\13\5\6\0\12\5"
            + "\15\0\1\4\130\0\5\5\57\4\21\5\7\4\4\0\12\5\21\0"
            + "\11\5\14\0\3\5\36\4\15\5\2\4\12\5\54\4\16\5\14\0"
            + "\44\4\24\5\10\0\12\5\3\0\3\4\12\5\44\4\122\0\3\5"
            + "\1\0\25\5\4\4\1\5\4\4\3\5\2\4\11\0\300\4\47\5"
            + "\25\0\4\5\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0"
            + "\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0"
            + "\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0"
            + "\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4\16\0"
            + "\5\5\30\0\1\57\1\57\5\5\20\0\2\4\23\0\1\4\13\0"
            + "\5\5\5\0\6\5\1\0\1\4\15\0\1\4\20\0\15\4\3\0"
            + "\33\4\25\0\15\5\4\0\1\5\3\0\14\5\21\0\1\4\4\0"
            + "\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0"
            + "\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0\4\4\5\0"
            + "\5\4\4\0\1\4\21\0\51\4\u0a77\0\57\4\1\0\57\4\1\0"
            + "\205\4\6\0\4\4\3\5\2\4\14\0\46\4\1\0\1\4\5\0"
            + "\1\4\2\0\70\4\7\0\1\4\17\0\1\5\27\4\11\0\7\4"
            + "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4"
            + "\1\0\7\4\1\0\7\4\1\0\40\5\57\0\1\4\u01d5\0\3\4"
            + "\31\0\11\4\6\5\1\0\5\4\2\0\5\4\4\0\126\4\2\0"
            + "\2\5\2\0\3\4\1\0\132\4\1\0\4\4\5\0\51\4\3\0"
            + "\136\4\21\0\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cd\4\63\0"
            + "\u048d\4\103\0\56\4\2\0\u010d\4\3\0\20\4\12\5\2\4\24\0"
            + "\57\4\1\5\4\0\12\5\1\0\31\4\7\0\1\5\120\4\2\5"
            + "\45\0\11\4\2\0\147\4\2\0\4\4\1\0\4\4\14\0\13\4"
            + "\115\0\12\4\1\5\3\4\1\5\4\4\1\5\27\4\5\5\20\0"
            + "\1\4\7\0\64\4\14\0\2\5\62\4\21\5\13\0\12\5\6\0"
            + "\22\5\6\4\3\0\1\4\4\0\12\5\34\4\10\5\2\0\27\4"
            + "\15\5\14\0\35\4\3\0\4\5\57\4\16\5\16\0\1\4\12\5"
            + "\46\0\51\4\16\5\11\0\3\4\1\5\10\4\2\5\2\0\12\5"
            + "\6\0\27\4\3\0\1\4\1\5\4\0\60\4\1\5\1\4\3\5"
            + "\2\4\2\5\5\4\2\5\1\4\1\5\1\4\30\0\3\4\2\0"
            + "\13\4\5\5\2\0\3\4\2\5\12\0\6\4\2\0\6\4\2\0"
            + "\6\4\11\0\7\4\1\0\7\4\221\0\43\4\10\5\1\0\2\5"
            + "\2\0\12\5\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0\u016e\4"
            + "\2\0\152\4\46\0\7\4\14\0\5\4\5\0\1\4\1\5\12\4"
            + "\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4"
            + "\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\15\4"
            + "\3\0\20\5\20\0\7\5\14\0\2\4\30\0\3\4\31\0\1\4"
            + "\6\0\5\4\1\0\207\4\2\0\1\5\4\0\1\4\13\0\12\5"
            + "\7\0\32\4\4\0\1\4\1\0\32\4\13\0\131\4\3\0\6\4"
            + "\2\0\6\4\2\0\6\4\2\0\3\4\3\0\2\4\3\0\2\4"
            + "\22\0\3\5\4\0\14\4\1\0\32\4\1\0\23\4\1\0\2\4"
            + "\1\0\17\4\2\0\16\4\42\0\173\4\105\0\65\4\210\0\1\5"
            + "\202\0\35\4\3\0\61\4\57\0\37\4\21\0\33\4\65\0\36\4"
            + "\2\0\44\4\4\0\10\4\1\0\5\4\52\0\236\4\2\0\12\5"
            + "\u0356\0\6\4\2\0\1\4\1\0\54\4\1\0\2\4\3\0\1\4"
            + "\2\0\27\4\252\0\26\4\12\0\32\4\106\0\70\4\6\0\2\4"
            + "\100\0\1\4\3\5\1\0\2\5\5\0\4\5\4\4\1\0\3\4"
            + "\1\0\33\4\4\0\3\5\4\0\1\5\40\0\35\4\203\0\66\4"
            + "\12\0\26\4\12\0\23\4\215\0\111\4\u03b7\0\3\5\65\4\17\5"
            + "\37\0\12\5\20\0\3\5\55\4\13\5\2\0\1\5\22\0\31\4"
            + "\7\0\12\5\6\0\3\5\44\4\16\5\1\0\12\5\100\0\3\5"
            + "\60\4\16\5\4\4\13\0\12\5\u04a6\0\53\4\15\5\10\0\12\5"
            + "\u0936\0\u036f\4\221\0\143\4\u0b9d\0\u042f\4\u33d1\0\u0239\4\u04c7\0\105\4"
            + "\13\0\1\4\56\5\20\0\4\5\15\4\u4060\0\2\4\u2163\0\5\5"
            + "\3\0\26\5\2\0\7\5\36\0\4\5\224\0\3\5\u01bb\0\125\4"
            + "\1\0\107\4\1\0\2\4\2\0\1\4\2\0\2\4\2\0\4\4"
            + "\1\0\14\4\1\0\1\4\1\0\7\4\1\0\101\4\1\0\4\4"
            + "\2\0\10\4\1\0\7\4\1\0\34\4\1\0\4\4\1\0\5\4"
            + "\1\0\1\4\3\0\7\4\1\0\u0154\4\2\0\31\4\1\0\31\4"
            + "\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4"
            + "\1\0\31\4\1\0\37\4\1\0\31\4\1\0\10\4\2\0\62\5"
            + "\u1600\0\4\4\1\0\33\4\1\0\2\4\1\0\1\4\2\0\1\4"
            + "\1\0\12\4\1\0\4\4\1\0\1\4\1\0\1\4\6\0\1\4"
            + "\4\0\1\4\1\0\1\4\1\0\1\4\1\0\3\4\1\0\2\4"
            + "\1\0\1\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"
            + "\1\0\1\4\1\0\2\4\1\0\1\4\2\0\4\4\1\0\7\4"
            + "\1\0\4\4\1\0\4\4\1\0\1\4\1\0\12\4\1\0\21\4"
            + "\5\0\3\4\1\0\5\4\1\0\21\4\u1144\0\ua6d7\4\51\0\u1035\4"
            + "\13\0\336\4\u3fe2\0\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"
            + "\1\5\36\0\140\5\200\0\360\5\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\2\0\2\1\1\2\1\3\1\1\1\3\7\2\1\1"
            + "\1\4\1\5\1\6\1\7\1\10\2\2\1\11\2\12"
            + "\1\1\1\13\1\14\1\0\1\14\2\0\7\2\1\0"
            + "\3\2\1\15\1\16\1\17\1\15\1\20\1\21\1\22"
            + "\1\23\1\15\1\24\1\25\1\14\4\0\6\2\1\26"
            + "\4\2\4\0\1\27\2\2\1\30\6\2\1\0\1\31"
            + "\1\32\1\0\7\2\1\33\1\0\1\34\6\2\1\0"
            + "\4\2\1\35\1\36\1\0\1\37\1\40\2\2\1\0"
            + "\1\41\1\42\20\0\1\43";

    private static int[] zzUnpackAction() {
        int[] result = new int[137];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */

        int j = offset;
        /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"
            + "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"
            + "\0\144\0\144\0\144\0\144\0\144\0\u0320\0\u0352\0\u0384"
            + "\0\u03b6\0\144\0\u03e8\0\144\0\372\0\u041a\0\u044c\0\u047e"
            + "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e"
            + "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\144\0\144\0\144\0\u0708"
            + "\0\144\0\144\0\144\0\144\0\u073a\0\144\0\144\0\u076c"
            + "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca"
            + "\0\u08fc\0\u092e\0\144\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"
            + "\0\u0a5a\0\u0a8c\0\u0abe\0\310\0\u0af0\0\u0b22\0\310\0\u0b54"
            + "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u073a\0\144\0\144"
            + "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"
            + "\0\310\0\u0e10\0\310\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"
            + "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\310\0\310"
            + "\0\u1068\0\310\0\310\0\u109a\0\u10cc\0\u10fe\0\310\0\310"
            + "\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e"
            + "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"
            + "\0\144";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[137];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */

        int j = offset;
        /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\3\3\1\4\1\5\1\3\1\6\1\7\1\10\1\11"
            + "\2\3\1\12\1\13\1\3\2\5\1\14\1\15\1\5"
            + "\1\16\1\5\1\17\5\5\1\3\1\20\1\5\1\3"
            + "\1\5\1\3\1\21\1\22\1\23\1\24\1\25\1\26"
            + "\5\5\1\27\2\3\1\4\1\3\1\30\1\31\1\32"
            + "\36\30\1\33\1\34\17\30\65\0\1\4\54\0\1\4"
            + "\5\0\3\5\1\0\2\5\2\0\2\5\1\0\15\5"
            + "\2\0\1\5\1\0\1\5\6\0\7\5\3\0\1\5"
            + "\6\0\1\35\1\0\1\35\13\0\1\36\10\0\1\37"
            + "\1\36\31\0\1\35\1\0\1\10\24\0\1\40\32\0"
            + "\1\10\1\0\1\10\13\0\1\36\10\0\1\37\1\36"
            + "\27\0\3\5\1\0\2\5\1\41\1\0\2\5\1\0"
            + "\15\5\2\0\1\5\1\0\1\5\6\0\7\5\3\0"
            + "\1\5\4\0\3\5\1\0\2\5\2\0\1\5\1\42"
            + "\1\0\7\5\1\43\5\5\2\0\1\5\1\0\1\5"
            + "\6\0\7\5\3\0\1\5\4\0\3\5\1\0\2\5"
            + "\2\0\2\5\1\0\3\5\1\44\11\5\2\0\1\5"
            + "\1\0\1\5\6\0\7\5\3\0\1\5\4\0\3\5"
            + "\1\0\2\5\2\0\1\45\1\5\1\0\15\5\2\0"
            + "\1\5\1\0\1\5\6\0\7\5\3\0\1\5\4\0"
            + "\3\5\1\0\2\5\2\0\2\5\1\0\11\5\1\46"
            + "\3\5\2\0\1\5\1\0\1\5\6\0\7\5\3\0"
            + "\1\5\4\0\3\5\1\0\2\5\2\0\2\5\1\0"
            + "\15\5\2\0\1\5\1\0\1\5\6\0\5\5\1\47"
            + "\1\5\3\0\1\5\4\0\3\5\1\0\2\5\2\0"
            + "\1\50\1\5\1\0\15\5\2\0\1\5\1\0\1\5"
            + "\6\0\7\5\3\0\1\5\6\0\1\37\1\0\1\37"
            + "\24\0\1\51\30\0\3\5\1\0\2\5\2\0\2\5"
            + "\1\0\11\5\1\52\1\5\1\53\1\5\2\0\1\5"
            + "\1\0\1\5\6\0\7\5\3\0\1\5\4\0\3\5"
            + "\1\0\2\5\2\0\2\5\1\0\13\5\1\54\1\5"
            + "\2\0\1\5\1\0\1\5\6\0\7\5\3\0\1\5"
            + "\1\30\2\0\36\30\2\0\17\30\2\0\1\32\57\0"
            + "\1\55\2\0\11\55\1\56\5\55\1\57\3\55\1\60"
            + "\1\61\1\62\10\55\1\63\1\64\11\55\1\65\1\66"
            + "\1\67\11\0\1\70\1\71\1\70\26\0\1\71\30\0"
            + "\1\37\1\0\1\37\13\0\1\36\11\0\1\36\31\0"
            + "\1\37\1\0\1\37\57\0\1\72\1\0\1\73\55\0"
            + "\3\5\1\0\2\5\2\0\2\5\1\74\15\5\2\0"
            + "\1\5\1\0\1\5\6\0\7\5\3\0\1\5\4\0"
            + "\3\5\1\0\2\5\2\0\2\5\1\0\14\5\1\75"
            + "\2\0\1\5\1\0\1\5\6\0\7\5\3\0\1\5"
            + "\4\0\3\5\1\0\2\5\2\0\2\5\1\0\13\5"
            + "\1\76\1\5\2\0\1\5\1\0\1\5\6\0\7\5"
            + "\3\0\1\5\4\0\3\5\1\0\2\5\2\0\2\5"
            + "\1\0\3\5\1\77\11\5\2\0\1\5\1\0\1\5"
            + "\6\0\7\5\3\0\1\5\4\0\3\5\1\0\2\5"
            + "\2\0\2\5\1\0\7\5\1\100\5\5\2\0\1\5"
            + "\1\0\1\5\6\0\7\5\3\0\1\5\4\0\3\5"
            + "\1\0\2\5\2\0\2\5\1\0\15\5\2\0\1\5"
            + "\1\0\1\5\6\0\1\101\6\5\3\0\1\5\4\0"
            + "\3\5\1\0\2\5\2\0\2\5\1\0\15\5\2\0"
            + "\1\5\1\0\1\5\6\0\2\5\1\102\4\5\3\0"
            + "\1\5\35\0\1\103\30\0\3\5\1\0\2\5\2\0"
            + "\2\5\1\0\1\5\1\104\1\105\12\5\2\0\1\5"
            + "\1\0\1\5\6\0\7\5\3\0\1\5\4\0\3\5"
            + "\1\0\2\5\2\0\2\5\1\0\15\5\2\0\1\5"
            + "\1\0\1\5\6\0\1\5\1\106\5\5\3\0\1\5"
            + "\4\0\3\5\1\0\2\5\2\0\2\5\1\0\14\5"
            + "\1\107\2\0\1\5\1\0\1\5\6\0\7\5\3\0"
            + "\1\5\6\0\1\110\1\0\1\110\13\0\1\110\2\0"
            + "\1\110\2\0\1\110\3\0\1\110\1\0\1\110\7\0"
            + "\2\110\3\0\1\110\12\0\1\111\1\0\1\111\13\0"
            + "\1\111\2\0\1\111\2\0\1\111\3\0\1\111\1\0"
            + "\1\111\7\0\2\111\3\0\1\111\12\0\1\70\1\0"
            + "\1\70\64\0\1\112\54\0\1\73\1\0\1\73\2\0"
            + "\1\112\65\0\1\113\46\0\3\5\1\0\2\5\2\0"
            + "\2\5\1\0\14\5\1\114\2\0\1\5\1\0\1\5"
            + "\6\0\7\5\3\0\1\5\4\0\3\5\1\0\2\5"
            + "\2\0\2\5\1\0\3\5\1\115\11\5\2\0\1\5"
            + "\1\0\1\5\6\0\7\5\3\0\1\5\4\0\3\5"
            + "\1\0\2\5\2\0\2\5\1\0\5\5\1\116\7\5"
            + "\2\0\1\5\1\0\1\5\6\0\7\5\3\0\1\5"
            + "\4\0\3\5\1\0\2\5\2\0\2\5\1\0\5\5"
            + "\1\117\7\5\2\0\1\5\1\0\1\5\6\0\7\5"
            + "\3\0\1\5\4\0\3\5\1\0\2\5\2\0\2\5"
            + "\1\0\14\5\1\120\2\0\1\5\1\0\1\5\6\0"
            + "\7\5\3\0\1\5\4\0\3\5\1\0\2\5\2\0"
            + "\2\5\1\0\5\5\1\121\7\5\2\0\1\5\1\0"
            + "\1\5\6\0\7\5\3\0\1\5\4\0\3\5\1\0"
            + "\2\5\2\0\2\5\1\0\3\5\1\122\11\5\2\0"
            + "\1\5\1\0\1\5\6\0\7\5\3\0\1\5\4\0"
            + "\3\5\1\0\2\5\2\0\2\5\1\0\4\5\1\123"
            + "\10\5\2\0\1\5\1\0\1\5\6\0\7\5\3\0"
            + "\1\5\4\0\3\5\1\0\2\5\2\0\2\5\1\0"
            + "\15\5\2\0\1\5\1\0\1\5\6\0\3\5\1\124"
            + "\3\5\3\0\1\5\4\0\3\5\1\0\2\5\2\0"
            + "\1\5\1\125\1\0\15\5\2\0\1\5\1\0\1\5"
            + "\6\0\7\5\3\0\1\5\6\0\1\126\1\0\1\126"
            + "\13\0\1\126\2\0\1\126\2\0\1\126\3\0\1\126"
            + "\1\0\1\126\7\0\2\126\3\0\1\126\12\0\1\127"
            + "\1\0\1\127\13\0\1\127\2\0\1\127\2\0\1\127"
            + "\3\0\1\127\1\0\1\127\7\0\2\127\3\0\1\127"
            + "\46\0\1\130\37\0\1\131\45\0\3\5\1\0\2\5"
            + "\2\0\2\5\1\0\2\5\1\132\12\5\2\0\1\5"
            + "\1\0\1\5\6\0\7\5\3\0\1\5\4\0\3\5"
            + "\1\0\2\5\2\0\2\5\1\0\11\5\1\133\3\5"
            + "\2\0\1\5\1\0\1\5\6\0\7\5\3\0\1\5"
            + "\4\0\3\5\1\0\2\5\2\0\2\5\1\0\2\5"
            + "\1\134\12\5\2\0\1\5\1\0\1\5\6\0\7\5"
            + "\3\0\1\5\4\0\3\5\1\0\2\5\2\0\2\5"
            + "\1\0\15\5\2\0\1\5\1\0\1\5\6\0\6\5"
            + "\1\135\3\0\1\5\4\0\3\5\1\0\2\5\2\0"
            + "\2\5\1\0\5\5\1\136\7\5\2\0\1\5\1\0"
            + "\1\5\6\0\7\5\3\0\1\5\4\0\3\5\1\0"
            + "\2\5\2\0\2\5\1\0\13\5\1\137\1\5\2\0"
            + "\1\5\1\0\1\5\6\0\7\5\3\0\1\5\4\0"
            + "\3\5\1\0\2\5\2\0\2\5\1\0\13\5\1\140"
            + "\1\5\2\0\1\5\1\0\1\5\6\0\7\5\3\0"
            + "\1\5\4\0\3\5\1\0\2\5\2\0\2\5\1\0"
            + "\5\5\1\141\7\5\2\0\1\5\1\0\1\5\6\0"
            + "\7\5\3\0\1\5\15\0\1\142\50\0\3\5\1\0"
            + "\2\5\2\0\2\5\1\0\15\5\2\0\1\5\1\0"
            + "\1\5\6\0\1\5\1\143\5\5\3\0\1\5\4\0"
            + "\3\5\1\0\2\5\2\0\1\144\1\5\1\0\15\5"
            + "\2\0\1\5\1\0\1\5\6\0\7\5\3\0\1\5"
            + "\4\0\3\5\1\0\2\5\2\0\2\5\1\0\15\5"
            + "\2\0\1\5\1\0\1\5\6\0\1\5\1\145\5\5"
            + "\3\0\1\5\4\0\3\5\1\0\2\5\2\0\2\5"
            + "\1\0\2\5\1\146\12\5\2\0\1\5\1\0\1\5"
            + "\6\0\7\5\3\0\1\5\4\0\3\5\1\0\2\5"
            + "\2\0\2\5\1\0\15\5\2\0\1\5\1\0\1\5"
            + "\6\0\1\5\1\147\5\5\3\0\1\5\4\0\3\5"
            + "\1\0\2\5\2\0\2\5\1\0\3\5\1\150\11\5"
            + "\2\0\1\5\1\0\1\5\6\0\7\5\3\0\1\5"
            + "\4\0\3\5\1\0\2\5\2\0\2\5\1\0\15\5"
            + "\2\0\1\5\1\0\1\5\6\0\4\5\1\151\2\5"
            + "\3\0\1\5\21\0\1\152\44\0\3\5\1\0\2\5"
            + "\2\0\2\5\1\0\13\5\1\153\1\5\2\0\1\5"
            + "\1\0\1\5\6\0\7\5\3\0\1\5\4\0\3\5"
            + "\1\0\2\5\2\0\2\5\1\0\2\5\1\154\12\5"
            + "\2\0\1\5\1\0\1\5\6\0\7\5\3\0\1\5"
            + "\4\0\3\5\1\0\2\5\2\0\1\155\1\5\1\0"
            + "\15\5\2\0\1\5\1\0\1\5\6\0\7\5\3\0"
            + "\1\5\4\0\3\5\1\0\2\5\2\0\2\5\1\0"
            + "\3\5\1\156\11\5\2\0\1\5\1\0\1\5\6\0"
            + "\7\5\3\0\1\5\4\0\3\5\1\0\2\5\2\0"
            + "\2\5\1\0\5\5\1\157\7\5\2\0\1\5\1\0"
            + "\1\5\6\0\7\5\3\0\1\5\4\0\3\5\1\0"
            + "\2\5\2\0\2\5\1\0\5\5\1\160\7\5\2\0"
            + "\1\5\1\0\1\5\6\0\7\5\3\0\1\5\22\0"
            + "\1\161\43\0\3\5\1\0\2\5\2\0\2\5\1\0"
            + "\14\5\1\162\2\0\1\5\1\0\1\5\6\0\7\5"
            + "\3\0\1\5\4\0\3\5\1\0\2\5\2\0\2\5"
            + "\1\0\3\5\1\163\11\5\2\0\1\5\1\0\1\5"
            + "\6\0\7\5\3\0\1\5\4\0\3\5\1\0\2\5"
            + "\2\0\2\5\1\0\5\5\1\164\7\5\2\0\1\5"
            + "\1\0\1\5\6\0\7\5\3\0\1\5\4\0\3\5"
            + "\1\0\2\5\2\0\2\5\1\0\5\5\1\165\7\5"
            + "\2\0\1\5\1\0\1\5\6\0\7\5\3\0\1\5"
            + "\21\0\1\166\44\0\3\5\1\0\2\5\2\0\2\5"
            + "\1\0\15\5\2\0\1\5\1\0\1\5\6\0\2\5"
            + "\1\167\4\5\3\0\1\5\4\0\3\5\1\0\2\5"
            + "\2\0\2\5\1\0\15\5\2\0\1\5\1\0\1\5"
            + "\6\0\2\5\1\170\4\5\3\0\1\5\23\0\1\171"
            + "\62\0\1\172\62\0\1\173\62\0\1\174\44\0\1\175"
            + "\77\0\1\176\56\0\1\177\65\0\1\200\62\0\1\201"
            + "\51\0\1\202\62\0\1\203\63\0\1\204\65\0\1\205"
            + "\63\0\1\206\62\0\1\207\62\0\1\210\40\0\1\211"
            + "\46\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[5200];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */

        int j = offset;
        /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;

    private static final int ZZ_NO_MATCH = 1;

    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\2\0\1\11\15\1\5\11\4\1\1\11\1\1\1\11"
            + "\1\1\1\0\1\1\2\0\7\1\1\0\3\1\3\11"
            + "\1\1\4\11\1\1\2\11\1\1\4\0\6\1\1\11"
            + "\4\1\4\0\12\1\1\0\2\11\1\0\10\1\1\0"
            + "\7\1\1\0\6\1\1\0\4\1\1\0\2\1\20\0"
            + "\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[137];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */

        int j = offset;
        /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead. When a
     * lead/high surrogate has been read from the input stream into the final
     * zzBuffer position, this will have a value of 1; otherwise, it will have a
     * value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    StringBuilder string = new StringBuilder();

    boolean isMultiname = false;

    long multinameId = 0;

    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public MethodInfoLexer() {

    }

    public int yychar() {
        return yychar;
    }

    public int yyline() {
        return yyline + 1;
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public MethodInfoLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */

        int j = 0;
        /* index in unpacked array */

        while (i < 2868) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) {
                /* possibly more input available */

                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */

        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has
     * grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public ParsedSymbol yylex() throws java.io.IOException, MethodInfoParseException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                    zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: {
                }
                case 36:
                    break;
                case 2: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_IDENTIFIER, yytext());
                }
                case 37:
                    break;
                case 3: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_INTEGER, Long.parseLong((yytext())));
                }
                case 38:
                    break;
                case 4: {
                    isMultiname = false;
                    yybegin(STRING);
                    string.setLength(0);
                }
                case 39:
                    break;
                case 5: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_COLON);
                }
                case 40:
                    break;
                case 6: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_COMMA);
                }
                case 41:
                    break;
                case 7: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_STAR);
                }
                case 42:
                    break;
                case 8: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_ASSIGN);
                }
                case 43:
                    break;
                case 9: {
                    string.append(yytext());
                }
                case 44:
                    break;
                case 10: {
                    throw new MethodInfoParseException("Unterminated string at end of line", yyline + 1);
                }
                case 45:
                    break;
                case 11: {
                    yybegin(YYINITIAL);
                    // length also includes the trailing quote
                    if (isMultiname) {
                        return new ParsedSymbol(ParsedSymbol.TYPE_MULTINAME, multinameId);
                    } else {
                        return new ParsedSymbol(ParsedSymbol.TYPE_STRING, string.toString());
                    }
                }
                case 46:
                    break;
                case 12: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_FLOAT, Double.parseDouble((yytext())));
                }
                case 47:
                    break;
                case 13: {
                    throw new MethodInfoParseException("Illegal escape sequence \"" + yytext() + "\"", yyline + 1);
                }
                case 48:
                    break;
                case 14: {
                    string.append('\n');
                }
                case 49:
                    break;
                case 15: {
                    string.append('\t');
                }
                case 50:
                    break;
                case 16: {
                    string.append('\b');
                }
                case 51:
                    break;
                case 17: {
                    string.append('\r');
                }
                case 52:
                    break;
                case 18: {
                    string.append('\\');
                }
                case 53:
                    break;
                case 19: {
                    string.append('\"');
                }
                case 54:
                    break;
                case 20: {
                    string.append('\f');
                }
                case 55:
                    break;
                case 21: {
                    string.append('\'');
                }
                case 56:
                    break;
                case 22: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_DOTS);
                }
                case 57:
                    break;
                case 23: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_NULL);
                }
                case 58:
                    break;
                case 24: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_TRUE);
                }
                case 59:
                    break;
                case 25: {
                    char val = (char) Integer.parseInt(yytext().substring(2), 16);
                    string.append(val);
                }
                case 60:
                    break;
                case 26: {
                    isMultiname = true;
                    String s = yytext();
                    multinameId = Long.parseLong(s.substring(2, s.length() - 2));
                    yybegin(STRING);
                    string.setLength(0);
                }
                case 61:
                    break;
                case 27: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_FALSE);
                }
                case 62:
                    break;
                case 28: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_STATIC);
                }
                case 63:
                    break;
                case 29: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_PRIVATE);
                }
                case 64:
                    break;
                case 30: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_PACKAGE);
                }
                case 65:
                    break;
                case 31: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_INTERNAL);
                }
                case 66:
                    break;
                case 32: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_EXPLICIT);
                }
                case 67:
                    break;
                case 33: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_UNDEFINED);
                }
                case 68:
                    break;
                case 34: {
                    return new ParsedSymbol(ParsedSymbol.TYPE_PROTECTED);
                }
                case 69:
                    break;
                case 35: {
                    String s = yytext();
                    long ns = Long.parseLong(s.substring(3, s.length() - 2));
                    return new ParsedSymbol(ParsedSymbol.TYPE_NAMESPACE, ns);
                }
                case 70:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        {
                            return new ParsedSymbol(ParsedSymbol.TYPE_EOF);
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }
}
