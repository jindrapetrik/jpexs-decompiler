/* The following code was generated by JFlex 1.6.0 */

/*
 *  Copyright (C) 2010-2016 JPEXS, All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */
package com.jpexs.decompiler.flash.abc.avm2.parser.script;
import com.jpexs.decompiler.flash.abc.avm2.parser.AVM2ParseException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.math.BigInteger;
import macromedia.asc.util.Decimal128;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import com.jpexs.decompiler.flash.abc.types.Float4;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Dropbox/Programovani/JavaSE/FFDec/libsrc/ffdec_lib/lexers/actionscript3_script.flex</tt>
 */
public final class ActionScriptLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;
  public static final int XMLOPENTAG = 6;
  public static final int XMLCLOSETAGFINISH = 8;
  public static final int XMLOPENTAGATTRIB = 10;
  public static final int XMLINSTR = 12;
  public static final int XMLCDATA = 14;
  public static final int XMLCOMMENT = 16;
  public static final int XML = 18;
  public static final int OIDENTIFIER = 20;
  public static final int XMLCDATAALONE = 22;
  public static final int XMLCOMMENTALONE = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\2\1\66\1\3\1\1\22\0\1\13\1\14\1\34"+
    "\1\65\1\6\1\113\1\110\1\35\1\54\1\56\1\5\1\61\1\55"+
    "\1\15\1\11\1\4\1\36\3\43\1\53\3\43\2\22\1\17\1\106"+
    "\1\12\1\33\1\16\1\24\1\64\1\30\1\20\1\26\1\27\1\57"+
    "\1\20\2\10\1\103\12\10\1\31\3\10\1\41\2\10\1\25\1\62"+
    "\1\32\1\112\1\10\1\0\1\51\1\67\1\42\1\45\1\60\1\46"+
    "\1\102\1\76\1\74\1\21\1\71\1\47\1\44\1\73\1\50\1\77"+
    "\1\21\1\70\1\72\1\52\1\37\1\101\1\75\1\40\1\100\1\21"+
    "\1\104\1\111\1\105\1\107\6\0\1\66\41\0\1\63\2\0\1\6"+
    "\12\0\1\6\1\0\1\23\2\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0"+
    "\213\6\1\0\5\7\2\0\246\6\1\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\6\5\0\3\6\35\0\13\7\5\0\53\6\37\7"+
    "\4\0\2\6\1\7\143\6\1\0\1\6\7\7\2\0\6\7\2\6"+
    "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\20\0\1\6"+
    "\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6"+
    "\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6"+
    "\3\7\1\6\5\7\22\0\31\6\3\7\104\0\23\6\61\0\40\7"+
    "\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7"+
    "\1\0\20\6\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\2\6\17\0\3\7\1\0\6\6\4\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7"+
    "\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7"+
    "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"+
    "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\21\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6"+
    "\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0"+
    "\1\7\16\0\12\7\20\0\4\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\20\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7\21\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6"+
    "\16\0\3\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6"+
    "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\6\0\12\7\2\0\2\7\15\0"+
    "\60\6\1\7\2\6\7\7\5\0\7\6\10\7\1\0\12\7\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0"+
    "\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0"+
    "\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0"+
    "\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7"+
    "\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6"+
    "\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7"+
    "\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
    "\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6"+
    "\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6"+
    "\3\0\3\7\10\6\7\0\15\6\1\0\4\6\3\7\13\0\22\6"+
    "\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7"+
    "\14\0\64\6\40\7\3\0\1\6\4\0\1\6\1\7\2\0\12\7"+
    "\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6"+
    "\5\0\106\6\12\0\37\6\1\0\14\7\4\0\14\7\12\0\12\7"+
    "\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\10\0\16\7\102\0\5\7\57\6"+
    "\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7"+
    "\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0"+
    "\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\3\7\2\6\1\0\2\7\6\0\300\6\66\7\6\0\4\7\u0116\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\3\0\14\0\2\0\32\0"+
    "\1\66\1\66\25\0\2\7\23\0\1\7\33\0\1\0\1\6\15\0"+
    "\1\6\20\0\15\6\63\0\15\7\4\0\1\7\3\0\14\7\21\0"+
    "\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0"+
    "\4\6\5\0\5\6\4\0\1\6\21\0\43\7\2\6\4\7\7\0"+
    "\u0a70\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6"+
    "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6"+
    "\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\40\7\57\0\1\6\u01c0\0\21\0\4\0\2\6\1\7\31\0\17\7"+
    "\1\0\5\6\2\0\3\7\2\6\4\0\126\6\2\0\2\7\2\0"+
    "\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0"+
    "\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0"+
    "\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7"+
    "\4\0\12\7\1\0\37\6\1\0\1\7\106\6\14\7\45\0\11\6"+
    "\2\0\147\6\2\0\4\6\1\0\36\6\2\0\2\6\105\0\13\6"+
    "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\30\0\64\6\14\0"+
    "\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6"+
    "\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0"+
    "\4\7\57\6\16\7\16\0\1\6\12\7\6\0\5\6\1\7\12\6"+
    "\12\7\5\6\1\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7"+
    "\2\0\12\7\6\0\27\6\3\0\1\6\3\7\62\6\1\7\1\6"+
    "\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6"+
    "\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6"+
    "\2\0\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0\4\6"+
    "\4\0\2\6\132\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0"+
    "\u2ba4\6\14\0\27\6\4\0\61\6\4\0\u1800\0\u0900\0\u016e\6\2\0"+
    "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\10\0\40\0\14\6"+
    "\4\0\20\7\20\0\16\7\5\0\2\7\30\0\3\7\40\0\5\6"+
    "\1\0\207\6\23\0\12\7\7\0\32\6\4\0\1\7\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\41\0\2\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0"+
    "\17\6\2\0\16\6\42\0\173\6\105\0\65\7\210\0\1\7\202\0"+
    "\35\6\3\0\61\6\17\0\1\7\37\0\40\6\20\0\21\6\1\7"+
    "\10\6\1\7\5\0\46\6\5\7\5\0\36\6\2\0\44\6\4\0"+
    "\10\6\1\0\5\7\52\0\236\6\2\0\12\7\126\0\50\6\10\0"+
    "\64\6\234\0\u0137\6\11\0\26\6\12\0\10\6\230\0\6\6\2\0"+
    "\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\12\0"+
    "\27\6\11\0\37\6\141\0\26\6\12\0\32\6\106\0\70\6\6\0"+
    "\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0"+
    "\3\6\1\0\33\6\4\0\3\7\4\0\1\7\40\0\35\6\3\0"+
    "\35\6\43\0\10\6\1\0\34\6\2\7\31\0\66\6\12\0\26\6"+
    "\12\0\23\6\15\0\22\6\156\0\111\6\u03b7\0\3\7\65\6\17\7"+
    "\37\0\12\7\17\0\4\7\55\6\13\7\25\0\31\6\7\0\12\7"+
    "\6\0\3\7\44\6\16\7\1\0\12\7\20\0\43\6\1\7\2\0"+
    "\1\6\11\0\3\7\60\6\16\7\4\6\13\0\12\7\1\6\45\0"+
    "\22\6\1\0\31\6\14\7\170\0\57\6\14\7\5\0\12\7\7\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\11\0\1\7\5\0\5\6\2\7\2\0\7\7\3\0\5\7"+
    "\u010b\0\60\6\24\7\2\6\1\0\1\6\10\0\12\7\246\0\57\6"+
    "\7\7\2\0\11\7\77\0\60\6\21\7\3\0\1\6\13\0\12\7"+
    "\46\0\53\6\15\7\10\0\12\7\u01d6\0\100\6\12\7\25\0\1\6"+
    "\u01c0\0\71\6\u0507\0\u0399\6\147\0\157\7\u0b91\0\u042f\6\u33d1\0\u0239\6"+
    "\7\0\37\6\1\0\12\7\146\0\36\6\2\0\5\7\13\0\60\6"+
    "\7\7\11\0\4\6\14\0\12\7\11\0\25\6\5\0\23\6\u0370\0"+
    "\105\6\13\0\1\6\56\7\20\0\4\7\15\6\u4060\0\2\6\u0bfe\0"+
    "\153\6\5\0\15\6\3\0\11\6\7\0\12\6\3\0\2\7\u14c6\0"+
    "\5\7\3\0\6\7\10\0\10\7\2\0\7\7\36\0\4\7\224\0"+
    "\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0"+
    "\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0"+
    "\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0"+
    "\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0"+
    "\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\10\6\2\0\62\7\u1000\0\305\6\13\0\7\7\u0529\0\4\6\1\0"+
    "\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0"+
    "\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0"+
    "\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0"+
    "\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0"+
    "\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\15\7\6\1\24\1\25"+
    "\1\26\1\6\1\27\1\30\1\31\1\1\12\6\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\43\1\44\1\1\1\42\2\45\1\46\2\47\1\42"+
    "\2\1\1\50\1\51\1\42\1\52\2\1\1\53\3\42"+
    "\2\54\2\42\1\55\1\56\1\1\1\57\2\42\1\0"+
    "\1\60\1\0\1\61\1\0\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\0\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\15\1\65\1\101\1\0"+
    "\1\102\1\103\1\104\1\65\1\105\1\0\5\6\1\106"+
    "\10\6\1\107\6\6\1\110\1\111\2\0\2\112\12\6"+
    "\1\113\1\114\1\115\11\6\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\2\124\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\0\1\136\1\0"+
    "\1\137\1\0\1\140\1\141\3\0\1\142\2\0\1\143"+
    "\3\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
    "\1\144\2\0\1\154\2\60\2\0\1\154\2\0\1\155"+
    "\1\156\2\0\1\157\1\160\1\161\1\0\1\65\1\162"+
    "\1\163\1\164\12\6\1\165\4\6\1\166\6\6\1\167"+
    "\1\170\1\112\4\6\1\171\4\6\1\172\12\6\1\173"+
    "\1\174\1\6\1\175\1\176\2\0\1\177\1\200\1\0"+
    "\1\201\2\0\1\202\4\0\1\203\1\204\2\0\1\60"+
    "\1\205\1\0\1\206\5\6\1\207\10\6\1\210\1\6"+
    "\1\211\2\6\1\212\1\213\5\6\1\214\6\6\1\215"+
    "\5\6\1\216\1\6\1\0\1\217\1\0\1\220\1\221"+
    "\2\0\1\222\1\0\1\223\1\60\1\0\1\6\1\224"+
    "\1\6\1\225\1\226\5\6\1\227\1\230\1\6\1\231"+
    "\2\6\1\232\1\6\1\233\10\6\1\234\5\6\2\0"+
    "\3\6\1\235\5\6\1\236\1\6\1\237\1\240\1\241"+
    "\1\6\1\242\1\6\1\243\3\6\1\244\4\6\2\0"+
    "\2\6\1\245\1\246\1\6\2\0\1\247\1\6\1\250"+
    "\5\6\1\251\1\6\1\252\1\6\2\0\1\6\1\253"+
    "\1\254\2\0\1\255\3\6\1\256\2\6\1\257\1\0"+
    "\1\260\1\261\4\0\1\262\1\6\1\263\1\6\1\264"+
    "\1\265\4\0\1\266\1\267\22\0\1\270\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[508];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u03dc"+
    "\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688"+
    "\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u03dc\0\u03dc\0\u0804\0\u03dc"+
    "\0\u03dc\0\u0850\0\u089c\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18"+
    "\0\u0a64\0\u03dc\0\u03dc\0\u03dc\0\u0ab0\0\u0afc\0\u0b48\0\u0b94"+
    "\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8\0\u0df4"+
    "\0\u0e40\0\u0e8c\0\u0ed8\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u0f24"+
    "\0\u0f70\0\u0fbc\0\u1008\0\u1054\0\u10a0\0\u03dc\0\u03dc\0\u10ec"+
    "\0\u1138\0\u1184\0\u03dc\0\u03dc\0\u11d0\0\u03dc\0\u121c\0\u1268"+
    "\0\u12b4\0\u03dc\0\u03dc\0\u1300\0\u03dc\0\u134c\0\u1398\0\u03dc"+
    "\0\u03dc\0\u13e4\0\u1430\0\u147c\0\u03dc\0\u14c8\0\u1514\0\u03dc"+
    "\0\u03dc\0\u1560\0\u03dc\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u16dc"+
    "\0\u1644\0\u1728\0\u03dc\0\u1774\0\u03dc\0\u17c0\0\u03dc\0\u180c"+
    "\0\u1858\0\u18a4\0\u03dc\0\u03dc\0\u18f0\0\u03dc\0\u03dc\0\u193c"+
    "\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u1988\0\u03dc\0\u03dc"+
    "\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8"+
    "\0\u1c34\0\u0558\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc"+
    "\0\u1e48\0\u1e94\0\u0558\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010"+
    "\0\u205c\0\u03dc\0\u03dc\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8"+
    "\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u2438"+
    "\0\u2484\0\u0558\0\u0558\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600"+
    "\0\u264c\0\u2698\0\u26e4\0\u2730\0\u277c\0\u03dc\0\u27c8\0\u03dc"+
    "\0\u2814\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u2860\0\u28ac"+
    "\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u12b4"+
    "\0\u03dc\0\u134c\0\u03dc\0\u1398\0\u03dc\0\u03dc\0\u28f8\0\u2944"+
    "\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u03dc\0\u03dc\0\u2ac0\0\u2b0c"+
    "\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u03dc\0\u2b58"+
    "\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u03dc\0\u2cd4\0\u2d20\0\u2d6c"+
    "\0\u2db8\0\u2e04\0\u03dc\0\u03dc\0\u2e50\0\u2e9c\0\u03dc\0\u2ee8"+
    "\0\u03dc\0\u2f34\0\u2f80\0\u03dc\0\u1ab8\0\u0558\0\u2fcc\0\u3018"+
    "\0\u3064\0\u30b0\0\u30fc\0\u3148\0\u3194\0\u31e0\0\u322c\0\u3278"+
    "\0\u0558\0\u32c4\0\u3310\0\u335c\0\u33a8\0\u0558\0\u33f4\0\u3440"+
    "\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u03dc\0\u03dc\0\u3608"+
    "\0\u3654\0\u36a0\0\u36ec\0\u0558\0\u3738\0\u3784\0\u37d0\0\u381c"+
    "\0\u0558\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4\0\u3a30"+
    "\0\u3a7c\0\u3ac8\0\u3b14\0\u0558\0\u0558\0\u3b60\0\u03dc\0\u03dc"+
    "\0\u3bac\0\u3bf8\0\u03dc\0\u03dc\0\u3c44\0\u03dc\0\u3c90\0\u3cdc"+
    "\0\u3d28\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58\0\u03dc\0\u03dc\0\u3ea4"+
    "\0\u3ef0\0\u2d6c\0\u03dc\0\u3f3c\0\u03dc\0\u3f88\0\u3fd4\0\u4020"+
    "\0\u406c\0\u40b8\0\u0558\0\u4104\0\u4150\0\u419c\0\u41e8\0\u4234"+
    "\0\u4280\0\u42cc\0\u4318\0\u0558\0\u4364\0\u0558\0\u43b0\0\u43fc"+
    "\0\u0558\0\u0558\0\u4448\0\u4494\0\u44e0\0\u452c\0\u4578\0\u0558"+
    "\0\u45c4\0\u4610\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u0558\0\u478c"+
    "\0\u47d8\0\u4824\0\u4870\0\u48bc\0\u0558\0\u4908\0\u28ac\0\u03dc"+
    "\0\u4954\0\u03dc\0\u03dc\0\u49a0\0\u2b0c\0\u03dc\0\u49ec\0\u03dc"+
    "\0\u2c3c\0\u4a38\0\u4a84\0\u0558\0\u4ad0\0\u0558\0\u0558\0\u4b1c"+
    "\0\u4b68\0\u4bb4\0\u4c00\0\u4c4c\0\u0558\0\u4c98\0\u4ce4\0\u0558"+
    "\0\u4d30\0\u4d7c\0\u0558\0\u4dc8\0\u0558\0\u4e14\0\u4e60\0\u4eac"+
    "\0\u4ef8\0\u4f44\0\u4f90\0\u4fdc\0\u5028\0\u0558\0\u5074\0\u50c0"+
    "\0\u510c\0\u5158\0\u51a4\0\u51f0\0\u523c\0\u5288\0\u52d4\0\u5320"+
    "\0\u0558\0\u536c\0\u53b8\0\u5404\0\u5450\0\u549c\0\u0558\0\u54e8"+
    "\0\u0558\0\u0558\0\u0558\0\u5534\0\u0558\0\u5580\0\u0558\0\u55cc"+
    "\0\u5618\0\u5664\0\u0558\0\u56b0\0\u56fc\0\u5748\0\u5794\0\u57e0"+
    "\0\u582c\0\u5878\0\u58c4\0\u0558\0\u0558\0\u5910\0\u595c\0\u59a8"+
    "\0\u0558\0\u59f4\0\u0558\0\u5a40\0\u5a8c\0\u5ad8\0\u5b24\0\u5b70"+
    "\0\u0558\0\u5bbc\0\u0558\0\u5c08\0\u5c54\0\u5ca0\0\u5cec\0\u0558"+
    "\0\u0558\0\u5d38\0\u5d84\0\u0558\0\u5dd0\0\u5e1c\0\u5e68\0\u0558"+
    "\0\u5eb4\0\u5f00\0\u0558\0\u5f4c\0\u03dc\0\u0558\0\u5f98\0\u5fe4"+
    "\0\u6030\0\u607c\0\u0558\0\u60c8\0\u0558\0\u6114\0\u0558\0\u03dc"+
    "\0\u6160\0\u61ac\0\u61f8\0\u6244\0\u0558\0\u0558\0\u6290\0\u62dc"+
    "\0\u6328\0\u6374\0\u63c0\0\u640c\0\u6458\0\u64a4\0\u64f0\0\u653c"+
    "\0\u6588\0\u65d4\0\u6620\0\u666c\0\u66b8\0\u6704\0\u6750\0\u679c"+
    "\0\u03dc\0\u67e8\0\u6834\0\u6880";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[508];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\16"+
    "\1\24\1\25\1\26\1\21\1\27\1\30\1\31\1\32"+
    "\2\24\1\33\1\16\1\34\1\35\4\24\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\24\1\44\1\33\1\24"+
    "\1\45\1\46\1\24\1\47\1\50\1\51\1\33\1\52"+
    "\1\53\1\54\1\24\1\55\1\56\1\16\1\57\1\60"+
    "\1\61\1\16\1\62\1\63\1\24\1\64\1\65\1\66"+
    "\1\67\1\24\1\70\1\24\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\31\104\1\107\25\104\1\110\31\104\1\111"+
    "\1\112\1\113\32\111\1\114\24\111\1\110\31\111\1\16"+
    "\1\115\1\116\1\117\1\120\3\16\1\121\2\16\1\117"+
    "\2\16\1\122\3\121\4\16\4\121\5\16\4\121\1\16"+
    "\7\121\4\16\2\121\6\16\15\121\1\123\10\16\1\115"+
    "\1\116\10\16\1\124\2\16\1\125\131\16\1\126\1\127"+
    "\46\16\1\130\7\16\1\131\1\115\1\116\21\131\1\132"+
    "\70\131\1\115\1\116\27\131\1\133\62\131\1\134\1\135"+
    "\12\131\1\136\77\131\1\115\1\116\7\131\1\137\71\131"+
    "\1\140\7\131\1\141\1\112\1\113\57\141\1\142\1\143"+
    "\30\141\1\131\1\115\1\116\27\131\1\144\62\131\1\134"+
    "\1\135\12\131\1\145\76\131\116\0\1\20\114\0\1\21"+
    "\7\0\1\21\100\0\1\146\2\0\1\146\1\147\1\150"+
    "\25\146\1\151\26\146\1\152\31\146\33\0\1\153\66\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\15\24\21\0\1\154\1\155\7\0\1\156"+
    "\13\0\1\156\4\0\1\156\7\0\1\156\1\157\47\0"+
    "\1\160\1\0\1\161\1\0\1\162\2\0\3\160\4\0"+
    "\4\160\1\0\1\163\3\0\4\160\1\0\7\160\4\0"+
    "\2\160\6\0\15\160\1\164\42\0\1\165\75\0\1\166"+
    "\15\0\1\167\76\0\1\170\14\0\1\171\77\0\1\172"+
    "\105\0\1\156\10\0\1\33\13\0\1\33\1\173\3\0"+
    "\1\33\2\174\1\175\4\0\1\33\3\0\2\176\13\0"+
    "\1\173\30\0\1\177\12\0\1\200\122\0\1\201\71\0"+
    "\1\156\10\0\1\202\13\0\1\203\1\173\2\204\1\0"+
    "\1\203\2\174\1\175\4\0\1\203\3\0\2\176\13\0"+
    "\1\173\25\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\6\0\3\24\1\205\1\206\10\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\11\24"+
    "\1\207\1\210\1\211\2\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\12\24"+
    "\1\212\3\24\3\0\1\24\1\213\6\0\11\24\1\214"+
    "\3\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\1\24\1\215\7\24\1\216\1\217\1\220\2\24\3\0"+
    "\2\24\6\0\5\24\1\221\7\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\12\24\1\222\2\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\6\0\3\24\1\223"+
    "\11\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\6\0\1\24\1\224\5\24\1\225"+
    "\1\24\1\226\3\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\2\24\1\227\6\24\1\230\1\24\1\231"+
    "\2\24\3\0\2\24\6\0\15\24\43\0\1\232\25\0"+
    "\1\233\115\0\1\234\64\0\1\235\101\0\1\236\13\0"+
    "\1\237\4\0\1\236\7\0\1\236\46\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\1\24\1\240\13\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\1\24\1\241\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\1\24"+
    "\1\242\12\24\1\243\1\24\3\0\1\24\1\244\6\0"+
    "\6\24\1\245\6\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\1\24\1\246\11\24\1\247\2\24\3\0"+
    "\1\24\1\250\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\6\24\1\251\1\24\1\252\5\24"+
    "\3\0\2\24\6\0\3\24\1\253\1\254\10\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\5\24\1\255\1\24\1\256\5\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\1\24\1\257"+
    "\11\24\1\260\2\24\3\0\2\24\6\0\1\24\1\261"+
    "\13\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\12\24\1\262\1\263\2\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\1\24\1\264\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\4\24\1\265\10\24\43\0\1\266\54\0\1\267\36\0"+
    "\1\270\55\0\1\271\35\0\1\272\113\0\1\273\60\0"+
    "\1\104\2\0\31\104\1\0\25\104\1\0\31\104\2\0"+
    "\1\106\111\0\1\274\3\0\30\274\1\275\1\276\1\274"+
    "\1\277\1\300\5\274\1\301\3\274\1\302\7\274\1\303"+
    "\3\274\1\0\1\304\1\305\2\274\1\306\20\274\1\111"+
    "\2\0\32\111\1\0\24\111\1\0\31\111\2\0\1\113"+
    "\113\0\1\116\114\0\1\117\7\0\1\117\116\0\1\307"+
    "\105\0\2\310\3\0\1\310\1\0\5\310\2\0\4\310"+
    "\1\0\1\311\2\0\16\310\3\0\2\310\6\0\15\310"+
    "\23\0\1\124\100\0\1\312\2\0\31\312\1\313\57\312"+
    "\1\314\2\0\32\314\1\315\56\314\16\0\1\316\127\0"+
    "\1\317\63\0\1\135\126\0\1\320\102\0\1\321\3\0"+
    "\1\322\3\0\1\323\2\0\3\322\2\0\1\324\1\0"+
    "\4\322\5\0\4\322\1\0\7\322\4\0\2\322\6\0"+
    "\15\322\1\325\7\0\1\326\3\0\33\326\1\327\1\330"+
    "\5\326\1\331\3\326\1\332\7\326\1\333\1\334\2\326"+
    "\1\0\1\335\1\336\2\326\1\337\10\326\1\340\7\326"+
    "\32\0\1\341\76\0\1\342\76\0\1\146\2\0\1\146"+
    "\1\343\55\146\1\152\31\146\1\147\1\344\1\345\111\147"+
    "\1\346\2\347\1\346\1\350\1\351\54\346\1\352\31\346"+
    "\1\146\3\0\62\146\1\0\25\146\11\0\1\353\124\0"+
    "\1\156\13\0\1\156\4\0\1\156\2\174\1\175\4\0"+
    "\1\156\3\0\2\176\43\0\2\160\3\0\1\160\1\0"+
    "\5\160\2\0\4\160\4\0\16\160\3\0\2\160\6\0"+
    "\15\160\43\0\1\354\75\0\1\355\7\0\1\356\121\0"+
    "\1\357\76\0\1\360\14\0\1\361\75\0\1\362\4\0"+
    "\1\363\13\0\1\363\4\0\1\363\7\0\1\363\5\0"+
    "\1\362\65\0\1\364\71\0\1\156\10\0\1\202\13\0"+
    "\1\202\4\0\1\202\2\174\1\175\4\0\1\202\3\0"+
    "\2\176\44\0\1\156\10\0\1\202\13\0\1\203\4\0"+
    "\1\203\2\174\1\175\4\0\1\203\3\0\2\176\53\0"+
    "\1\365\1\0\1\365\3\0\3\365\5\0\1\365\3\0"+
    "\2\365\1\0\2\365\2\0\1\365\1\0\1\365\3\0"+
    "\2\365\6\0\1\365\32\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\1\24\1\366\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\7\24"+
    "\1\367\6\24\3\0\2\24\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\13\24\1\370\2\24"+
    "\3\0\2\24\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\6\0\4\24"+
    "\1\371\10\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\14\24\1\372\1\24\3\0\2\24\6\0\3\24"+
    "\1\373\11\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\10\24\1\374\1\375\4\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\6\0\4\24\1\376\10\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\4\24\1\377\10\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\12\24\1\u0100\3\24\3\0"+
    "\2\24\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\6\0\1\24\1\u0101"+
    "\13\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\11\24\1\u0102\4\24\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\4\24\1\u0103\10\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\1\24\1\u0104"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\1\24\1\u0105\14\24\3\0\2\24\6\0\11\24"+
    "\1\u0106\3\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\6\0\1\24\1\u0107\3\24"+
    "\1\u0108\7\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\6\0\10\24\1\u0109\4\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\14\24"+
    "\1\u010a\1\24\3\0\2\24\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\6\0\3\24\1\u010b\11\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\4\24\1\u010c\11\24\3\0\2\24"+
    "\6\0\15\24\16\0\1\u010d\1\0\1\u010d\7\0\2\u010d"+
    "\4\0\4\u010d\5\0\4\u010d\1\0\7\u010d\4\0\2\u010d"+
    "\6\0\15\u010d\10\0\1\235\2\0\31\235\1\u010e\57\235"+
    "\22\0\1\236\13\0\1\236\1\u010f\3\0\1\236\7\0"+
    "\1\236\20\0\1\u010f\56\0\1\u010f\34\0\1\u010f\25\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u0110\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\14\24\1\u0111\1\24\3\0\2\24"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\6\0\10\24\1\u0112\4\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\13\24"+
    "\1\u0113\2\24\3\0\2\24\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\14\24\1\u0114\1\24"+
    "\3\0\2\24\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\6\0\5\24"+
    "\1\u0115\7\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\11\24\1\u0116\4\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\6\24"+
    "\1\u0117\5\24\1\u0118\1\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\6\0\6\24\1\u0119\6\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\6\0\10\24\1\u011a\4\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\14\24\1\u011b\1\24\3\0\2\24"+
    "\6\0\3\24\1\u011c\11\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\14\24\1\u011d\1\24\3\0\2\24"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\6\0\5\24\1\u011e\7\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\6\0\1\u011f\14\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\4\24\1\u0120\11\24\3\0"+
    "\2\24\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\12\24\1\u0121\3\24\3\0\2\24\6\0"+
    "\5\24\1\u0122\7\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\6\0\5\24\1\u0123"+
    "\7\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\6\0\1\24\1\u0124\13\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\14\24\1\u0125"+
    "\1\24\3\0\2\24\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\10\24\1\u0126\5\24\3\0"+
    "\2\24\6\0\15\24\43\0\1\u0127\113\0\1\u0128\100\0"+
    "\1\u0129\1\0\1\u0129\3\0\3\u0129\5\0\1\u0129\3\0"+
    "\2\u0129\1\0\2\u0129\2\0\1\u0129\1\0\1\u0129\3\0"+
    "\2\u0129\6\0\1\u0129\44\0\1\u012a\1\0\1\u012a\3\0"+
    "\3\u012a\5\0\1\u012a\3\0\2\u012a\1\0\2\u012a\2\0"+
    "\1\u012a\1\0\1\u012a\3\0\2\u012a\6\0\1\u012a\42\0"+
    "\1\u012b\113\0\1\u012c\105\0\1\u012d\6\0\3\u012d\4\0"+
    "\4\u012d\5\0\4\u012d\1\0\7\u012d\4\0\2\u012d\6\0"+
    "\15\u012d\1\u012e\17\0\2\322\3\0\1\322\1\0\5\322"+
    "\2\0\4\322\4\0\16\322\3\0\2\322\6\0\15\322"+
    "\25\0\1\u012f\7\0\1\u0130\76\0\1\u0131\6\0\3\u0131"+
    "\4\0\4\u0131\5\0\4\u0131\1\0\7\u0131\4\0\2\u0131"+
    "\6\0\15\u0131\30\0\1\u0132\1\0\1\u0132\3\0\3\u0132"+
    "\5\0\1\u0132\3\0\2\u0132\1\0\2\u0132\2\0\1\u0132"+
    "\1\0\1\u0132\3\0\2\u0132\6\0\1\u0132\44\0\1\u0133"+
    "\1\0\1\u0133\3\0\3\u0133\5\0\1\u0133\3\0\2\u0133"+
    "\1\0\2\u0133\2\0\1\u0133\1\0\1\u0133\3\0\2\u0133"+
    "\6\0\1\u0133\46\0\1\u0134\13\0\1\u0135\4\0\1\u0134"+
    "\7\0\1\u0134\56\0\1\u0136\113\0\1\u0137\116\0\1\343"+
    "\15\0\2\343\1\0\1\343\1\0\7\343\5\0\1\343"+
    "\6\0\14\343\13\0\1\345\111\0\1\346\2\347\1\346"+
    "\1\350\1\u0138\54\346\1\352\31\346\5\347\1\u0139\113\347"+
    "\1\u0139\13\347\1\350\15\347\2\350\1\347\1\350\1\347"+
    "\7\350\5\347\1\350\6\347\14\350\11\347\1\346\2\347"+
    "\1\346\1\u013a\1\u0138\54\346\1\352\32\346\3\347\1\346"+
    "\1\u0138\60\346\1\347\25\346\15\0\1\u013b\124\0\1\u013c"+
    "\120\0\1\u013d\102\0\1\363\13\0\1\363\4\0\1\363"+
    "\7\0\1\363\62\0\1\363\13\0\1\363\4\0\1\363"+
    "\2\174\1\175\4\0\1\363\46\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\1\24\1\u013e\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\6\0\3\24\1\u013f\11\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\14\24\1\u0140"+
    "\1\24\3\0\2\24\6\0\3\24\1\u0141\11\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\4\24\1\u0142"+
    "\11\24\3\0\2\24\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\1\24\1\u0143"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\13\24\1\u0144\2\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\1\24\1\u0145\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\13\24\1\u0146\2\24\3\0"+
    "\2\24\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\4\24\1\u0147\11\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\13\24\1\u0148\2\24\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\3\24\1\u0149\11\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\13\24\1\u014a\2\24\3\0"+
    "\2\24\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\6\0\1\24\1\u014b"+
    "\13\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\1\24\1\u014c\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\12\24\1\u014d\3\24"+
    "\3\0\2\24\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\6\0\3\24"+
    "\1\u014e\11\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\u014f\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u0150\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\1\24\1\u0151\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\6\0\7\24\1\u0152\5\24\16\0"+
    "\3\u010d\7\0\3\u010d\3\0\4\u010d\4\0\16\u010d\3\0"+
    "\2\u010d\6\0\15\u010d\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\13\24\1\u0153\2\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\1\24\1\u0154\14\24\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u0155\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\14\24\1\u0156\1\24\3\0\2\24"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\14\24\1\u0157\1\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\11\24"+
    "\1\u0158\4\24\3\0\2\24\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\1\24"+
    "\1\u0159\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\6\0\5\24\1\u015a"+
    "\7\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\11\24\1\u015b\1\u015c\3\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\1\24\1\u015d\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\14\24\1\u015e\1\24\3\0"+
    "\2\24\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\6\0\7\24\1\u015f"+
    "\5\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\11\24\1\u0160\4\24\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\11\24\1\u0161"+
    "\4\24\3\0\2\24\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\2\24\1\u0162\12\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\14\24\1\u0163\1\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\6\0\12\24\1\u0164\2\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\7\24\1\u0165"+
    "\6\24\3\0\2\24\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\5\24\1\u0166\7\24\30\0\1\u0167\1\0\1\u0167\3\0"+
    "\3\u0167\5\0\1\u0167\3\0\2\u0167\1\0\2\u0167\2\0"+
    "\1\u0167\1\0\1\u0167\3\0\2\u0167\6\0\1\u0167\44\0"+
    "\1\u0168\1\0\1\u0168\3\0\3\u0168\5\0\1\u0168\3\0"+
    "\2\u0168\1\0\2\u0168\2\0\1\u0168\1\0\1\u0168\3\0"+
    "\2\u0168\6\0\1\u0168\25\0\2\u0169\5\0\2\u012d\1\0"+
    "\1\u0169\1\0\1\u012d\1\u016a\5\u012d\2\0\4\u012d\4\0"+
    "\16\u012d\3\0\2\u012d\6\0\15\u012d\25\0\1\u016b\124\0"+
    "\1\u016c\75\0\2\u0131\3\0\1\u0131\1\0\5\u0131\2\0"+
    "\4\u0131\4\0\16\u0131\3\0\2\u0131\6\0\15\u0131\30\0"+
    "\1\u016d\1\0\1\u016d\3\0\3\u016d\5\0\1\u016d\3\0"+
    "\2\u016d\1\0\2\u016d\2\0\1\u016d\1\0\1\u016d\3\0"+
    "\2\u016d\6\0\1\u016d\44\0\1\u016e\1\0\1\u016e\3\0"+
    "\3\u016e\5\0\1\u016e\3\0\2\u016e\1\0\2\u016e\2\0"+
    "\1\u016e\1\0\1\u016e\3\0\2\u016e\6\0\1\u016e\46\0"+
    "\1\u0134\13\0\1\u0134\1\u016f\3\0\1\u0134\7\0\1\u0134"+
    "\20\0\1\u016f\10\0\1\u0170\45\0\1\u016f\34\0\1\u016f"+
    "\10\0\1\u0170\6\0\1\346\2\347\1\346\1\u0171\1\u0138"+
    "\54\346\1\352\31\346\4\347\1\345\1\u0139\106\347\27\0"+
    "\1\u0172\72\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\10\24\1\u0173\5\24\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\3\24\1\u0174\11\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\5\24\1\u0175\7\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\14\24\1\u0176\1\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\6\0\7\24\1\u0177\5\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\1\24\1\u0178"+
    "\14\24\3\0\2\24\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\14\24\1\u0179\1\24\3\0"+
    "\2\24\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\6\24\1\u017a\7\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\14\24\1\u017b\1\24\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\14\24\1\u017c"+
    "\1\24\3\0\2\24\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\1\24\1\u017d"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\11\24\1\u017e\4\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\6\0\1\24\1\u017f\13\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\6\0\6\24\1\u0180\6\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\12\24\1\u0181\3\24\3\0\2\24"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\6\0\4\24\1\u0182\10\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\6\0\2\24\1\u0183\12\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\6\0\1\24\1\u0184\13\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\6\0\1\24"+
    "\1\u0185\13\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\6\0\5\24\1\u0186\7\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\4\24"+
    "\1\u0187\11\24\3\0\2\24\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\6\0\3\24\1\u0188\11\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\6\0\12\24"+
    "\1\u0189\2\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\u018a\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\1\24\1\u018b\13\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\1\24\1\u018c\13\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\13\24\1\u018d\2\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\1\24\1\u018e\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\6\0\5\24\1\u018f\7\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\13\24\1\u0190\2\24\3\0\2\24"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\u0191\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\13\24\1\u0192"+
    "\2\24\3\0\2\24\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\4\24\1\u0193\10\24\11\0\2\u0169\10\0\1\u0169\2\0"+
    "\1\u016a\124\0\1\u0194\171\0\1\u0170\36\0\1\u0195\71\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\5\24\1\u0196\7\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\4\24\1\u0197\10\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\11\24\1\u0198\4\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\1\24\1\u0199\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\6\0\5\24\1\u019a\7\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\6\0\5\24"+
    "\1\u019b\7\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\15\24\1\u019c\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\11\24\1\u019d"+
    "\4\24\3\0\2\24\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\2\24\6\0"+
    "\5\24\1\u019e\7\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\10\24\1\u019f\5\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\7\24\1\u01a0\6\24\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\4\24\1\u01a1\10\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\4\24\1\u01a2\11\24\3\0"+
    "\2\24\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\6\0\7\24\1\u01a3"+
    "\5\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\2\24\6\0\10\24\1\u01a4\4\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u01a5\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\6\24\1\u01a6\7\24\3\0\2\24"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\14\24\1\u01a7\1\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\10\24"+
    "\1\u01a8\5\24\3\0\2\24\6\0\4\24\1\u01a9\10\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\6\0\4\24\1\u01aa\10\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\4\24\1\u01ab\11\24"+
    "\3\0\2\24\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\2\24\6\0\13\24"+
    "\1\u01ac\1\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\4\24\1\u01ad\11\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\14\24"+
    "\1\u01ae\1\24\3\0\2\24\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\2\24"+
    "\6\0\5\24\1\u01af\7\24\40\0\1\u01b0\114\0\1\u01b1"+
    "\70\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\2\24\6\0\4\24\1\u01b2\10\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\1\24\1\u01b3\14\24"+
    "\3\0\2\24\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\14\24\1\u01b4\1\24\3\0\2\24"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\4\24\1\u01b5\11\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\12\24"+
    "\1\u01b6\3\24\3\0\2\24\6\0\15\24\11\0\3\u01b7"+
    "\2\0\3\24\2\0\1\u01b7\4\0\3\24\3\0\4\24"+
    "\4\0\16\24\1\u01b8\2\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\11\24\1\u01b9\3\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\7\24\1\u01ba\6\24\3\0"+
    "\2\24\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\6\0\3\24\1\u01bb"+
    "\11\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\13\24\1\u01bc\2\24\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u01bd\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\13\24\1\u01be\2\24\3\0\2\24"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\13\24\1\u01bf\2\24\3\0\2\24\6\0\15\24"+
    "\16\0\3\24\7\0\3\24\3\0\4\24\4\0\4\24"+
    "\1\u01c0\11\24\3\0\2\24\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\1\24"+
    "\1\u01c1\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\14\24\1\u01c2\1\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\1\24\1\u01c3\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\14\24\1\u01c4\1\24"+
    "\3\0\2\24\6\0\15\24\41\0\1\u01c5\112\0\1\u01c6"+
    "\71\0\3\24\7\0\3\24\3\0\4\24\4\0\16\24"+
    "\3\0\1\24\1\u01c7\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\16\24\3\0\1\24\1\u01c8"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\2\24\6\0\4\24\1\u01c9\10\24"+
    "\11\0\3\u01b7\7\0\1\u01b7\40\0\1\u01b8\40\0\3\u01b8"+
    "\5\0\1\u01ca\1\0\1\u01b8\6\0\1\u01cb\13\0\1\u01cb"+
    "\4\0\1\u01cb\7\0\1\u01cb\46\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\16\24\3\0\1\24\1\u01cc\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\4\24\1\u01cd\11\24\3\0\2\24\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\4\24\1\u01ce\10\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\4\24\1\u01cf\11\24\3\0"+
    "\2\24\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\11\24\1\u01d0\4\24\3\0\2\24\6\0"+
    "\15\24\16\0\3\24\7\0\3\24\3\0\4\24\4\0"+
    "\16\24\3\0\1\24\1\u01d1\6\0\15\24\16\0\3\24"+
    "\7\0\3\24\3\0\4\24\4\0\16\24\3\0\1\24"+
    "\1\u01d2\6\0\15\24\16\0\3\24\7\0\3\24\3\0"+
    "\4\24\4\0\16\24\3\0\2\24\6\0\11\24\1\u01d3"+
    "\3\24\40\0\1\u01d4\110\0\1\u01d5\74\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\7\24\1\u01d6\6\24\3\0"+
    "\2\24\6\0\15\24\32\0\1\u01d7\13\0\1\u01d7\4\0"+
    "\1\u01d7\7\0\1\u01d7\41\0\3\u01d8\5\0\1\u01d7\1\0"+
    "\1\u01d8\6\0\1\u01cb\13\0\1\u01cb\4\0\1\u01cb\2\0"+
    "\1\u01d8\4\0\1\u01cb\1\0\1\u01d9\1\0\2\u01da\41\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\1\24\1\u01db\6\0\15\24\16\0\3\24\7\0\3\24"+
    "\3\0\4\24\4\0\14\24\1\u01dc\1\24\3\0\2\24"+
    "\6\0\15\24\16\0\3\24\7\0\3\24\3\0\4\24"+
    "\4\0\16\24\3\0\1\24\1\u01dd\6\0\15\24\16\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\12\24\1\u01de"+
    "\3\24\3\0\2\24\6\0\15\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\7\24\1\u01df\6\24\3\0"+
    "\2\24\6\0\15\24\35\0\1\u01e0\67\0\3\u01d8\7\0"+
    "\1\u01d8\6\0\1\u01d7\13\0\1\u01d7\4\0\1\u01d7\2\0"+
    "\1\u01d8\4\0\1\u01d7\1\0\1\u01d9\1\0\2\u01da\34\0"+
    "\3\u01d8\7\0\1\u01d8\41\0\1\u01d9\37\0\3\u01d9\5\0"+
    "\1\u01e1\1\0\1\u01d9\6\0\1\u01e2\13\0\1\u01e2\4\0"+
    "\1\u01e2\7\0\1\u01e2\55\0\1\u01e3\4\0\1\u01e4\13\0"+
    "\1\u01e4\4\0\1\u01e4\7\0\1\u01e4\5\0\1\u01e3\40\0"+
    "\3\24\7\0\3\24\3\0\4\24\4\0\16\24\3\0"+
    "\2\24\6\0\3\24\1\u01e5\11\24\16\0\3\24\7\0"+
    "\3\24\3\0\4\24\4\0\10\24\1\u01e6\5\24\3\0"+
    "\2\24\6\0\15\24\32\0\1\u01e7\13\0\1\u01e7\4\0"+
    "\1\u01e7\7\0\1\u01e7\41\0\3\u01e8\5\0\1\u01e7\1\0"+
    "\1\u01e8\6\0\1\u01e2\13\0\1\u01e2\4\0\1\u01e2\2\0"+
    "\1\u01e8\4\0\1\u01e2\1\0\1\u01e9\1\0\2\u01ea\55\0"+
    "\1\u01e4\13\0\1\u01e4\4\0\1\u01e4\7\0\1\u01e4\41\0"+
    "\3\u01d8\7\0\1\u01d8\6\0\1\u01e4\13\0\1\u01e4\4\0"+
    "\1\u01e4\2\0\1\u01d8\4\0\1\u01e4\1\0\1\u01d9\37\0"+
    "\3\u01e8\7\0\1\u01e8\6\0\1\u01e7\13\0\1\u01e7\4\0"+
    "\1\u01e7\2\0\1\u01e8\4\0\1\u01e7\1\0\1\u01e9\1\0"+
    "\2\u01ea\34\0\3\u01e8\7\0\1\u01e8\41\0\1\u01e9\37\0"+
    "\3\u01e9\5\0\1\u01eb\1\0\1\u01e9\6\0\1\u01ec\13\0"+
    "\1\u01ec\4\0\1\u01ec\7\0\1\u01ec\55\0\1\u01ed\4\0"+
    "\1\u01ee\13\0\1\u01ee\4\0\1\u01ee\7\0\1\u01ee\5\0"+
    "\1\u01ed\54\0\1\u01ef\13\0\1\u01ef\4\0\1\u01ef\7\0"+
    "\1\u01ef\41\0\3\u01f0\5\0\1\u01ef\1\0\1\u01f0\6\0"+
    "\1\u01ec\13\0\1\u01ec\4\0\1\u01ec\2\0\1\u01f0\4\0"+
    "\1\u01ec\1\0\1\u01f1\1\0\2\u01f2\55\0\1\u01ee\13\0"+
    "\1\u01ee\4\0\1\u01ee\7\0\1\u01ee\41\0\3\u01e8\7\0"+
    "\1\u01e8\6\0\1\u01ee\13\0\1\u01ee\4\0\1\u01ee\2\0"+
    "\1\u01e8\4\0\1\u01ee\1\0\1\u01e9\37\0\3\u01f0\7\0"+
    "\1\u01f0\6\0\1\u01ef\13\0\1\u01ef\4\0\1\u01ef\2\0"+
    "\1\u01f0\4\0\1\u01ef\1\0\1\u01f1\1\0\2\u01f2\34\0"+
    "\3\u01f0\7\0\1\u01f0\41\0\1\u01f1\37\0\3\u01f1\5\0"+
    "\1\u01f3\1\0\1\u01f1\6\0\1\u01f4\13\0\1\u01f4\4\0"+
    "\1\u01f4\7\0\1\u01f4\55\0\1\u01f5\4\0\1\u01f6\13\0"+
    "\1\u01f6\4\0\1\u01f6\7\0\1\u01f6\5\0\1\u01f5\54\0"+
    "\1\u01f7\13\0\1\u01f7\4\0\1\u01f7\7\0\1\u01f7\41\0"+
    "\3\u01f8\5\0\1\u01f7\1\0\1\u01f8\6\0\1\u01f4\13\0"+
    "\1\u01f4\4\0\1\u01f4\2\0\1\u01f8\4\0\1\u01f4\2\0"+
    "\1\u01f9\2\u01fa\55\0\1\u01f6\13\0\1\u01f6\4\0\1\u01f6"+
    "\7\0\1\u01f6\41\0\3\u01f0\7\0\1\u01f0\6\0\1\u01f6"+
    "\13\0\1\u01f6\4\0\1\u01f6\2\0\1\u01f0\4\0\1\u01f6"+
    "\1\0\1\u01f1\37\0\3\u01f8\7\0\1\u01f8\6\0\1\u01f7"+
    "\13\0\1\u01f7\4\0\1\u01f7\2\0\1\u01f8\4\0\1\u01f7"+
    "\2\0\1\u01f9\2\u01fa\34\0\3\u01f8\7\0\1\u01f8\42\0"+
    "\1\u01f9\52\0\1\u01fb\4\0\1\u01fc\13\0\1\u01fc\4\0"+
    "\1\u01fc\7\0\1\u01fc\5\0\1\u01fb\54\0\1\u01fc\13\0"+
    "\1\u01fc\4\0\1\u01fc\7\0\1\u01fc\41\0\3\u01f8\7\0"+
    "\1\u01f8\6\0\1\u01fc\13\0\1\u01fc\4\0\1\u01fc\2\0"+
    "\1\u01f8\4\0\1\u01fc\2\0\1\u01f9\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26828];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\1\1\1\11\14\1\2\11\1\1\2\11"+
    "\10\1\3\11\17\1\4\11\6\1\2\11\3\1\2\11"+
    "\1\1\1\11\3\1\2\11\1\1\1\11\2\1\2\11"+
    "\3\1\1\11\2\1\2\11\1\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\0\2\11\1\1\2\11\1\1\5\11"+
    "\1\0\2\11\3\1\1\0\25\1\2\11\2\0\30\1"+
    "\1\11\1\1\1\11\1\1\5\11\2\1\7\11\1\0"+
    "\1\11\1\0\1\11\1\0\2\11\3\0\1\1\2\0"+
    "\2\11\2\1\7\11\1\1\2\0\2\1\1\11\2\0"+
    "\1\1\2\0\2\11\2\0\1\11\1\1\1\11\1\0"+
    "\1\1\1\11\31\1\2\11\27\1\2\11\2\0\2\11"+
    "\1\0\1\11\2\0\1\1\4\0\2\11\2\0\1\1"+
    "\1\11\1\0\1\11\51\1\1\0\1\11\1\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\1\1\0\41\1\2\0"+
    "\32\1\2\0\5\1\2\0\14\1\2\0\3\1\2\0"+
    "\10\1\1\0\1\11\1\1\4\0\5\1\1\11\4\0"+
    "\2\1\22\0\1\11\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[508];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    private String sourceCode;

    private int repeatNum = 1;

    private boolean enableWhiteSpace = false;

    private int yyStartOffset = 0;

    private final Pattern float4Pattern = Pattern.compile("float4.*\\([\r\n \t\f]*(?<f1>[^\r\n \t\f]+)[\r\n \t\f]*,[\r\n \t\f]*(?<f2>[^\r\n \t\f]+)[\r\n \t\f]*,[\r\n \t\f]*(?<f3>[^\r\n \t\f]+)[\r\n \t\f]*,[\r\n \t\f]*(?<f4>[^\r\n \t\f]+)[\r\n \t\f]*\\)", Pattern.MULTILINE);

    public ActionScriptLexer(String sourceCode){
        this(new StringReader(sourceCode));
        this.sourceCode = sourceCode;
    }

    public void yypushbackstr(String s, int state, int skipNumChars)
    {
        int numLines = count(s, "\n");
        int newYyline = yyline - numLines;
        yyStartOffset = yyStartOffset + skipNumChars + yychar;
        sourceCode = s + sourceCode.substring(yychar + yylength());
        yyreset(new StringReader(sourceCode));
        yybegin(state);
        yyline = newYyline;
    }

    public void setEnableWhiteSpace(boolean enable)
    {
        this.enableWhiteSpace = enable;
    }

    public void begin(int state)
    {
        string.setLength(0);
        yybegin(state);
    }

    StringBuilder string = new StringBuilder();

    private static String xmlTagName = "";

    private int startPos = -1;

    public int yychar() {
        return yyStartOffset + yychar;
    }

    private Stack<ParsedSymbol> pushedBack = new Stack<>();

    public int yyline() {
        return yyline + 1;
    }

    private List<LexListener> listeners=new ArrayList<>();

    public void addListener(LexListener listener){
        listeners.add(listener);
    }

    public void removeListener(LexListener listener){
        listeners.remove(listener);
    }

    public void informListenersLex(ParsedSymbol s){
        for(LexListener l:listeners){
            l.onLex(s);
        }
    }

    public void informListenersPushBack(ParsedSymbol s){
        for(LexListener l:listeners){
            l.onPushBack(s);
        }
    }

    public void pushback(ParsedSymbol symb) {
        pushedBack.push(symb);
        last = null;
        informListenersPushBack(symb);
    }

    ParsedSymbol last;
    public ParsedSymbol lex() throws java.io.IOException, AVM2ParseException{
        ParsedSymbol ret = null;
        if (!pushedBack.isEmpty()){
            ret = last = pushedBack.pop();
        } else {
            ret = last = yylex();
        }
        informListenersLex(ret);
        return ret;
    }

    private int count(String str, String target) {
        return (str.length() - str.replace(target, "").length()) / target.length();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ActionScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public ParsedSymbol yylex() throws java.io.IOException, AVM2ParseException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { 
          }
        case 185: break;
        case 2: 
          { yyline++;
                                    if (enableWhiteSpace) { return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_WHITESPACE, yytext()); }
          }
        case 186: break;
        case 3: 
          { if (enableWhiteSpace) { return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_WHITESPACE, yytext()); }
          }
        case 187: break;
        case 4: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DIVIDE, yytext());
          }
        case 188: break;
        case 5: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.MULTIPLY, yytext());
          }
        case 189: break;
        case 6: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.IDENTIFIER, yytext());
          }
        case 190: break;
        case 7: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DOT, yytext());
          }
        case 191: break;
        case 8: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.LOWER_THAN, yytext());
          }
        case 192: break;
        case 9: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NOT, yytext());
          }
        case 193: break;
        case 10: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.MINUS, yytext());
          }
        case 194: break;
        case 11: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.GREATER_THAN, yytext());
          }
        case 195: break;
        case 12: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.COLON, yytext());
          }
        case 196: break;
        case 13: 
          { String ival = yytext();
                                    if (ival.endsWith("i") || ival.endsWith("u")) {
                                        ival = ival.substring(0, ival.length() - 1);
                                    }
                                    try{
                                        return new ParsedSymbol(yychar(), SymbolGroup.INTEGER, SymbolType.INTEGER, Integer.parseInt(ival)); 
                                    } catch(NumberFormatException nfe){
                                        //its too long for an Integer var
                                        return new ParsedSymbol(yychar(), SymbolGroup.DOUBLE, SymbolType.DOUBLE, Double.parseDouble(ival)); 
                                    }
          }
        case 197: break;
        case 14: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.TERNAR, yytext());
          }
        case 198: break;
        case 15: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.BRACKET_OPEN, yytext());
          }
        case 199: break;
        case 16: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.BRACKET_CLOSE, yytext());
          }
        case 200: break;
        case 17: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN, yytext());
          }
        case 201: break;
        case 18: 
          { startPos = yychar();
                                    string.setLength(0);
                                    yybegin(STRING);
          }
        case 202: break;
        case 19: 
          { startPos = yychar();
                                    string.setLength(0);
                                    yybegin(CHARLITERAL);
          }
        case 203: break;
        case 20: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.PARENT_OPEN, yytext());
          }
        case 204: break;
        case 21: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.COMMA, yytext());
          }
        case 205: break;
        case 22: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.PARENT_CLOSE, yytext());
          }
        case 206: break;
        case 23: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.PLUS, yytext());
          }
        case 207: break;
        case 24: 
          { startPos = yychar();
                                    string.setLength(0);
                                    yybegin(OIDENTIFIER);
          }
        case 208: break;
        case 25: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ATTRIBUTE, yytext());
          }
        case 209: break;
        case 26: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.CURLY_OPEN, yytext());
          }
        case 210: break;
        case 27: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.CURLY_CLOSE, yytext());
          }
        case 211: break;
        case 28: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.SEMICOLON, yytext());
          }
        case 212: break;
        case 29: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NEGATE, yytext());
          }
        case 213: break;
        case 30: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.BITAND, yytext());
          }
        case 214: break;
        case 31: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.BITOR, yytext());
          }
        case 215: break;
        case 32: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.XOR, yytext());
          }
        case 216: break;
        case 33: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.MODULO, yytext());
          }
        case 217: break;
        case 34: 
          { string.append(yytext());
          }
        case 218: break;
        case 35: 
          { yybegin(YYINITIAL); yyline++;
          }
        case 219: break;
        case 36: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     String tos = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(startPos, SymbolGroup.STRING, SymbolType.STRING, tos);
          }
        case 220: break;
        case 37: 
          { yybegin(YYINITIAL);  yyline++;
          }
        case 221: break;
        case 38: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return new ParsedSymbol(startPos, SymbolGroup.STRING, SymbolType.STRING, string.toString());
          }
        case 222: break;
        case 39: 
          { string.append(yytext());  yyline++;
          }
        case 223: break;
        case 40: 
          { yybegin(XML);
                                    pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_STARTTAG_END, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 224: break;
        case 41: 
          { yybegin(YYINITIAL);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRNAMEVAR_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 225: break;
        case 42: 
          { yybegin(XML);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.GREATER_THAN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 226: break;
        case 43: 
          { yybegin(YYINITIAL);
                                      return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRVALVAR_BEGIN, yytext());
          }
        case 227: break;
        case 44: 
          { string.append(yytext()); yyline++;
          }
        case 228: break;
        case 45: 
          { yybegin(YYINITIAL);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_VAR_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 229: break;
        case 46: 
          { for(int r=0;r<repeatNum;r++) string.append(yytext()); repeatNum = 1;
          }
        case 230: break;
        case 47: 
          { yybegin(YYINITIAL);
                                     repeatNum = 1;
                                     // length also includes the trailing quote
                                     return new ParsedSymbol(startPos, SymbolGroup.IDENTIFIER, SymbolType.IDENTIFIER, string.toString());
          }
        case 231: break;
        case 48: 
          { yyline += count(yytext(),"\n");
          }
        case 232: break;
        case 49: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_DIVIDE, yytext());
          }
        case 233: break;
        case 50: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_MULTIPLY, yytext());
          }
        case 234: break;
        case 51: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DESCENDANTS, yytext());
          }
        case 235: break;
        case 52: 
          { return new ParsedSymbol(yychar(), SymbolGroup.TYPENAME, SymbolType.TYPENAME, yytext());
          }
        case 236: break;
        case 53: 
          { String dval = yytext();
                                    if (dval.endsWith("m")) {
                                        dval = dval.substring(0, dval.length() - 1);
                                        return new ParsedSymbol(yychar(), SymbolGroup.DECIMAL, SymbolType.DECIMAL, new Decimal128(dval));
                                    }
                                    if (dval.endsWith("f")) {
                                        dval = dval.substring(0, dval.length() - 1);
                                        return new ParsedSymbol(yychar(), SymbolGroup.FLOAT, SymbolType.FLOAT, Float.parseFloat(dval));
                                    }
                                    if (dval.endsWith("d")) {
                                        dval = dval.substring(0, dval.length() - 1);
                                    }
                                    return new ParsedSymbol(yychar(), SymbolGroup.DOUBLE, SymbolType.DOUBLE, Double.parseDouble(dval));
          }
        case 237: break;
        case 54: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.FILTER, yytext());
          }
        case 238: break;
        case 55: 
          { startPos = yychar();
                                    yybegin(XMLOPENTAG);
                                    string.setLength(0);
                                    return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTTAG_BEGIN, yytext());
          }
        case 239: break;
        case 56: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.SHIFT_LEFT, yytext());
          }
        case 240: break;
        case 57: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.LOWER_EQUAL, yytext());
          }
        case 241: break;
        case 58: 
          { return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTVARTAG_BEGIN, yytext());
          }
        case 242: break;
        case 59: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NOT_EQUAL, yytext());
          }
        case 243: break;
        case 60: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DECREMENT, yytext());
          }
        case 244: break;
        case 61: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_MINUS, yytext());
          }
        case 245: break;
        case 62: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.SHIFT_RIGHT, yytext());
          }
        case 246: break;
        case 63: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.GREATER_EQUAL, yytext());
          }
        case 247: break;
        case 64: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NAMESPACE_OP, yytext());
          }
        case 248: break;
        case 65: 
          { String fval = yytext();
                                    if (fval.endsWith("f")) {
                                        fval = fval.substring(0, fval.length() - 1);
                                    }
                                    return new ParsedSymbol(yychar(), SymbolGroup.FLOAT, SymbolType.FLOAT, Float.parseFloat(fval));
          }
        case 249: break;
        case 66: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NULL_DOT, yytext());
          }
        case 250: break;
        case 67: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NULL_COALESCE, yytext());
          }
        case 251: break;
        case 68: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.EQUALS, yytext());
          }
        case 252: break;
        case 69: 
          { try {
                                        return new ParsedSymbol(yychar(), SymbolGroup.INTEGER, SymbolType.INTEGER, Integer.parseInt(yytext(), 8));
                                   } catch (NumberFormatException nfe) {
                                        //its too long for an Integer var
                                        return new ParsedSymbol(yychar(), SymbolGroup.DOUBLE, SymbolType.DOUBLE, new BigInteger(yytext(), 8).doubleValue()); 
                                   }
          }
        case 253: break;
        case 70: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.DO, yytext());
          }
        case 254: break;
        case 71: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.AS, yytext());
          }
        case 255: break;
        case 72: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_PLUS, yytext());
          }
        case 256: break;
        case 73: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.INCREMENT, yytext());
          }
        case 257: break;
        case 74: 
          { return new ParsedSymbol(yychar(), SymbolGroup.NAMESPACESUFFIX, SymbolType.NAMESPACESUFFIX, Integer.parseInt(yytext().substring(1)));
          }
        case 258: break;
        case 75: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.IF, yytext());
          }
        case 259: break;
        case 76: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.IS, yytext());
          }
        case 260: break;
        case 77: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.IN, yytext());
          }
        case 261: break;
        case 78: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_BITAND, yytext());
          }
        case 262: break;
        case 79: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.AND, yytext());
          }
        case 263: break;
        case 80: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_BITOR, yytext());
          }
        case 264: break;
        case 81: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.OR, yytext());
          }
        case 265: break;
        case 82: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_XOR, yytext());
          }
        case 266: break;
        case 83: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_MODULO, yytext());
          }
        case 267: break;
        case 84: 
          { /* ignore illegal character escape */
          }
        case 268: break;
        case 85: 
          { string.append('\"');
          }
        case 269: break;
        case 86: 
          { string.append('\'');
          }
        case 270: break;
        case 87: 
          { string.append('\f');
          }
        case 271: break;
        case 88: 
          { string.append('\t');
          }
        case 272: break;
        case 89: 
          { string.append('\\');
          }
        case 273: break;
        case 90: 
          { string.append('\b');
          }
        case 274: break;
        case 91: 
          { string.append('\r');
          }
        case 275: break;
        case 92: 
          { string.append('\n');
          }
        case 276: break;
        case 93: 
          { yybegin(XML);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTFINISHTAG_END, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 277: break;
        case 94: 
          { yybegin(XMLOPENTAGATTRIB);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRIBUTENAME, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 278: break;
        case 95: 
          { yybegin(XMLOPENTAG);
                                        return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRIBUTEVALUE, yytext());
          }
        case 279: break;
        case 96: 
          { yybegin(XMLOPENTAG);
                                        return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_ATTRIBUTEVALUE_SINGLEQUOTED, yytext());
          }
        case 280: break;
        case 97: 
          { yybegin(XML);
                                    string.append(yytext());
                                    String tos = string.toString();
                                    string.setLength(0);
                                    return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_INSTR, tos);
          }
        case 281: break;
        case 98: 
          { yybegin(XMLOPENTAG);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTTAG_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 282: break;
        case 99: 
          { yybegin(YYINITIAL);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_STARTVARTAG_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 283: break;
        case 100: 
          { throw new AVM2ParseException("Illegal escape sequence \"" + yytext() + "\"", yyline + 1);
          }
        case 284: break;
        case 101: 
          { for(int r=0;r<repeatNum;r++) string.append('\f'); repeatNum = 1;
          }
        case 285: break;
        case 102: 
          { for(int r=0;r<repeatNum;r++) string.append('\t'); repeatNum = 1;
          }
        case 286: break;
        case 103: 
          { for(int r=0;r<repeatNum;r++) string.append('\\'); repeatNum = 1;
          }
        case 287: break;
        case 104: 
          { for(int r=0;r<repeatNum;r++) string.append('\u00A7'); repeatNum = 1;
          }
        case 288: break;
        case 105: 
          { for(int r=0;r<repeatNum;r++) string.append('\b'); repeatNum = 1;
          }
        case 289: break;
        case 106: 
          { for(int r=0;r<repeatNum;r++) string.append('\r'); repeatNum = 1;
          }
        case 290: break;
        case 107: 
          { for(int r=0;r<repeatNum;r++) string.append('\n'); repeatNum = 1;
          }
        case 291: break;
        case 108: 
          { return new ParsedSymbol(yychar(), SymbolGroup.REGEXP, SymbolType.REGEXP, yytext());
          }
        case 292: break;
        case 109: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.REST, yytext());
          }
        case 293: break;
        case 110: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_SHIFT_LEFT, yytext());
          }
        case 294: break;
        case 111: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.STRICT_NOT_EQUAL, yytext());
          }
        case 295: break;
        case 112: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.USHIFT_RIGHT, yytext());
          }
        case 296: break;
        case 113: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_SHIFT_RIGHT, yytext());
          }
        case 297: break;
        case 114: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.STRICT_EQUALS, yytext());
          }
        case 298: break;
        case 115: 
          { try {
                                        return new ParsedSymbol(yychar(), SymbolGroup.INTEGER, SymbolType.INTEGER, Integer.parseInt(yytext().substring(2), 16));
                                    } catch (NumberFormatException nfe) {
                                        //its too long for an Integer var
                                        return new ParsedSymbol(yychar(), SymbolGroup.DOUBLE, SymbolType.DOUBLE, new BigInteger(yytext().substring(2), 16).doubleValue()); 
                                    }
          }
        case 299: break;
        case 116: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.USE, yytext());
          }
        case 300: break;
        case 117: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.FOR, yytext());
          }
        case 301: break;
        case 118: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.TRY, yytext());
          }
        case 302: break;
        case 119: 
          { return new ParsedSymbol(yychar(), SymbolGroup.PREPROCESSOR, SymbolType.PREPROCESSOR, yytext().substring(2));
          }
        case 303: break;
        case 120: 
          { String verbatimString = yytext();
                                    verbatimString = verbatimString.substring(2, verbatimString.length() - 1);
                                    return new ParsedSymbol(yychar(), SymbolGroup.STRING, SymbolType.STRING, verbatimString);
          }
        case 304: break;
        case 121: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.SET, yytext());
          }
        case 305: break;
        case 122: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.NEW, yytext());
          }
        case 306: break;
        case 123: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.VAR, yytext());
          }
        case 307: break;
        case 124: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.GET, yytext());
          }
        case 308: break;
        case 125: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_AND, yytext());
          }
        case 309: break;
        case 126: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_OR, yytext());
          }
        case 310: break;
        case 127: 
          { string.append(yytext());
                                     yybegin(XML);
                                     String ret = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_CDATA, ret);
          }
        case 311: break;
        case 128: 
          { string.append(yytext());
                                     yybegin(XML);
                                     String ret = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_COMMENT, ret);
          }
        case 312: break;
        case 129: 
          { yybegin(YYINITIAL);
                                    pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_FINISHVARTAG_BEGIN, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 313: break;
        case 130: 
          { yybegin(XMLINSTR);
                                    if (string.length() > 0){
                                       String tos = string.toString(); 
                                       string.setLength(0);
                                       string.append(yytext());
                                       return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_TEXT, tos);                                       
                                    }
                                    string.append(yytext());
          }
        case 314: break;
        case 131: 
          { string.append(yytext());
                                     yybegin(YYINITIAL);
                                     String ret = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_CDATA, ret);
          }
        case 315: break;
        case 132: 
          { string.append(yytext());
                                     yybegin(YYINITIAL);
                                     String ret = string.toString();
                                     string.setLength(0);
                                     return new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_COMMENT, ret);
          }
        case 316: break;
        case 133: 
          { string.setLength(0); string.append(yytext() ); yybegin(XMLCOMMENTALONE);
          }
        case 317: break;
        case 134: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.ASSIGN_USHIFT_RIGHT, yytext());
          }
        case 318: break;
        case 135: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CASE, yytext());
          }
        case 319: break;
        case 136: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.TRUE, yytext());
          }
        case 320: break;
        case 137: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.THIS, yytext());
          }
        case 321: break;
        case 138: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.ELSE, yytext());
          }
        case 322: break;
        case 139: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.EACH, yytext());
          }
        case 323: break;
        case 140: 
          { return new ParsedSymbol(yychar(), SymbolGroup.GLOBALCONST, SymbolType.NULL, yytext());
          }
        case 324: break;
        case 141: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.WITH, yytext());
          }
        case 325: break;
        case 142: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.VOID, yytext());
          }
        case 326: break;
        case 143: 
          { char val = (char) Integer.parseInt(yytext().substring(2), 16);
                        				   string.append(val);
          }
        case 327: break;
        case 144: 
          { pushback(new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_FINISHTAG, yytext()));
                                    if (string.length() > 0){
                                       pushback(new ParsedSymbol(startPos, SymbolGroup.XML, SymbolType.XML_TEXT, string.toString()));
                                       string.setLength(0);
                                    }
                                    return lex();
          }
        case 328: break;
        case 145: 
          { String ret = string.toString(); string.setLength(0); string.append(yytext()); yybegin(XMLCOMMENT);
                                     if (!ret.isEmpty()) return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_TEXT, ret);
          }
        case 329: break;
        case 146: 
          { char val = (char) Integer.parseInt(yytext().substring(2), 16);
                        				   for(int r=0;r<repeatNum;r++) string.append(val); repeatNum = 1;
          }
        case 330: break;
        case 147: 
          { repeatNum = Integer.parseInt(yytext().substring(2, yytext().length()-1));
          }
        case 331: break;
        case 148: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CLASS, yytext());
          }
        case 332: break;
        case 149: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CONST, yytext());
          }
        case 333: break;
        case 150: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CATCH, yytext());
          }
        case 334: break;
        case 151: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.FALSE, yytext());
          }
        case 335: break;
        case 152: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.FINAL, yytext());
          }
        case 336: break;
        case 153: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.THROW, yytext());
          }
        case 337: break;
        case 154: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.BREAK, yytext());
          }
        case 338: break;
        case 155: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.SUPER, yytext());
          }
        case 339: break;
        case 156: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.WHILE, yytext());
          }
        case 340: break;
        case 157: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.DELETE, yytext());
          }
        case 341: break;
        case 158: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.TYPEOF, yytext());
          }
        case 342: break;
        case 159: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.RETURN, yytext());
          }
        case 343: break;
        case 160: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.STATIC, yytext());
          }
        case 344: break;
        case 161: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.SWITCH, yytext());
          }
        case 345: break;
        case 162: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.NATIVE, yytext());
          }
        case 346: break;
        case 163: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.IMPORT, yytext());
          }
        case 347: break;
        case 164: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.PUBLIC, yytext());
          }
        case 348: break;
        case 165: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.DEFAULT, yytext());
          }
        case 349: break;
        case 166: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.DYNAMIC, yytext());
          }
        case 350: break;
        case 167: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.FINALLY, yytext());
          }
        case 351: break;
        case 168: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.EXTENDS, yytext());
          }
        case 352: break;
        case 169: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.PACKAGE, yytext());
          }
        case 353: break;
        case 170: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.PRIVATE, yytext());
          }
        case 354: break;
        case 171: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.CONTINUE, yytext());
          }
        case 355: break;
        case 172: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.FUNCTION, yytext());
          }
        case 356: break;
        case 173: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.OVERRIDE, yytext());
          }
        case 357: break;
        case 174: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.INTERNAL, yytext());
          }
        case 358: break;
        case 175: 
          { return new ParsedSymbol(yychar(), SymbolGroup.GLOBALCONST, SymbolType.INFINITY, yytext());
          }
        case 359: break;
        case 176: 
          { string.setLength(0); string.append(yytext() ); yybegin(XMLCDATAALONE);
          }
        case 360: break;
        case 177: 
          { return new ParsedSymbol(yychar(), SymbolGroup.GLOBALCONST, SymbolType.UNDEFINED, yytext());
          }
        case 361: break;
        case 178: 
          { return new ParsedSymbol(yychar(), SymbolGroup.IDENTIFIER, SymbolType.NAMESPACE, yytext());
          }
        case 362: break;
        case 179: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.INTERFACE, yytext());
          }
        case 363: break;
        case 180: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.PROTECTED, yytext());
          }
        case 364: break;
        case 181: 
          { String ret = string.toString(); string.setLength(0); string.append(yytext() ); yybegin(XMLCDATA);
                                    if (!ret.isEmpty()) return new ParsedSymbol(yychar(), SymbolGroup.XML, SymbolType.XML_TEXT, ret);
          }
        case 365: break;
        case 182: 
          { return new ParsedSymbol(yychar(), SymbolGroup.KEYWORD, SymbolType.IMPLEMENTS, yytext());
          }
        case 366: break;
        case 183: 
          { return new ParsedSymbol(yychar(), SymbolGroup.OPERATOR, SymbolType.INSTANCEOF, yytext());
          }
        case 367: break;
        case 184: 
          { Matcher f4Matcher = float4Pattern.matcher(yytext());
                                    f4Matcher.matches();
                                    float[] fvalues = new float[4];
                                    for (int i = 0; i < 4; i++) {
                                        String fval = f4Matcher.group("f" + (i + 1));
                                        if (fval.endsWith("f")) {
                                            fval = fval.substring(0, fval.length() - 1);
                                        }
                                        fvalues[i] = Float.parseFloat(fval);
                                    }
                                    return new ParsedSymbol(yychar(), SymbolGroup.FLOAT4, SymbolType.FLOAT4, new Float4(fvalues));
          }
        case 368: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return new ParsedSymbol(yychar(), SymbolGroup.EOF, SymbolType.EOF, null);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
